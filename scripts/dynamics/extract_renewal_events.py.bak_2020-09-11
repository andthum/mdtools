#!/usr/bin/env python3


# This file is part of MDTools.
# Copyright (C) 2020  Andreas Thum
#
# MDTools is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# MDTools is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with MDTools.  If not, see <http://www.gnu.org/licenses/>.




import sys
import os
from datetime import datetime
import psutil
import argparse
import numpy as np
import mdtools as mdt
from msd_at_coord_change import get_pos




def extract_renewal_events(universe, ref, cms, compound='atoms', begin=0,
        every=1, verbose=False, debug=False):
    """
    Extract renewal events from a
    :attr:`~MDAnalysis.core.universe.Universe.trajectory`. A renewal
    event occurs when the selection compound that was continuously bound
    the longest to a reference compound dissociates from it.
    
    Parameters
    ----------
    universe : MDAnalysis.core.universe.Universe
        The MDAnalysis :class:`~MDAnalysis.core.universe.Universe` which
        holds the unwrapped and whole reference compounds.
    ref : MDAnalysis.core.groups.AtomGroup
        The reference :class:`~MDAnalysis.core.groups.AtomGroup`.
    cms : array_like
        List of boolean contact matrices as e.g. generated with
        :func:`mdtools.structure.contact_matrix`, one for each frame.
        The contact matrices must be given as scipy sparse matrices.
        The rows must stand for the reference compounds, the columns for
        the selection compounds.
    compound : str, optional
        For which type of components the contact matrices in `cms` were
        calculated. Must be either ``'atoms'``, ``'segments'``,
        ``'residues'``, or ``'fragments'``.
    begin : int, optional
        The frame number of the
        :attr:`~MDAnalysis.core.universe.Universe.trajectory` to which
        the first contact matrix in `cms` corresponds to.
    every : int, optional
        To how many frames of the
        :attr:`~MDAnalysis.core.universe.Universe.trajectory` one step
        in `cms` corresponds to.
    verbose : bool, optional
        If ``True``, print progress information to standard output.
    debug : bool, optional
        If ``True``, check the input arguments.
    
    Returns
    -------
    refix_t0 : numpy.ndarray
        The so indices of the reference compounds which underwent
        renewal events. Indexing starts at zero.
    selix_t0 : numpy.ndarray
        The corresponding indices of the selection compounds that were
        continuously bound the longest to the reference compounds.
        Indexing starts at zero.
    t0 : numpy.ndarray
        The corresponding times when the selection compounds started
        coordinating to the reference compounds.
    trenew : numpy.ndarray
        The corresponding renewal times needed till dissociation of the
        selection compounds
    pos_t0 : numpy.ndarray
        The corresponding of the reference compounds at time `t0`.
    displ : numpy.ndarray
        The corresponding displacements of the reference compounds
        during `trenew`.
    """
    
    if debug:
        for i, cm in enumerate(cms):
            if cm.ndim != 2:
                warnings.warn("cms seems not to be a list of contact"
                              " matrices, since its {}-th element has"
                              " not 2 dimensions".format(i),
                              RuntimeWarning)
            if cm.shape != cms[0].shape:
                raise ValueError("All arrays in cms must have the same"
                                 " shape")
            if type(cm) != type(cms[0]):
                raise TypeError("All arrays in cms must be of the same"
                                " type")
        if (compound != 'atoms' and
            compound != 'segments' and
            compound != 'residues' and
            compound != 'fragments'):
            raise ValueError("compound must be either 'atoms',"
                             " 'segments', 'residues' or 'fragments',"
                             " but you gave '{}'"
                             .format(compound))
        if ((compound == 'atoms' and ref.n_atoms != cms[0].shape[0]) or
            (compound == 'segments' and ref.n_segments != cms[0].shape[0]) or
            (compound == 'residues' and ref.n_residues != cms[0].shape[0]) or
            (compound == 'fragments' and ref.n_fragments != cms[0].shape[0])):
            raise ValueError("The number of reference compounds does not"
                             " fit to the number of columns of the"
                             " contact matrices")
        if begin < 0:
            raise ValueError("begin must not be negative")
        if every <= 0:
            raise ValueError("every must be positive")
        mdt.check.time_step(trj=universe.trajectory[begin:len(cms)*every])
    
    
    refix2refix_t0 = -np.ones(cms[0].shape[0], dtype=np.int32)
    refix_t0 = []
    selix_t0 = []
    t0 = []
    trenew = []
    pos_t0 = []
    displ = []
    
    
    if verbose:
        timer = datetime.now()
        proc = psutil.Process(os.getpid())
        print("  Frame   {:12d} of {:12d}"
              .format(0, len(cms)-1),
              flush=True)
        print("    Elapsed time:             {}"
              .format(datetime.now()-timer),
              flush=True)
        print("    Current memory usage: {:18.2f} MiB"
              .format(proc.memory_info().rss/2**20),
              flush=True)
        timer = datetime.now()
    
    refix, selix = cms[0].nonzero()
    refix_unique, selix = mdt.nph.group_by(
                              keys=refix.astype(np.uint32),
                              values=selix.astype(np.uint32),
                              assume_sorted=True,
                              return_keys=True)
    refix_t0.extend(refix_unique)
    refix2refix_t0[refix_unique] = np.arange(len(refix_t0))
    selix_t0.extend(selix)
    t0.extend(np.nan for i in refix_t0)
    trenew.extend(np.nan for i in refix_t0)
    pos = get_pos(universe=universe,
                  atm_grp=ref,
                  frame=begin,
                  compound=compound,
                  debug=debug)
    pos_t0.extend(pos[refix_unique])
    displ.extend(np.full(3, np.nan, dtype=np.float32) for i in refix_t0)
    
    
    for i, cm in enumerate(cms[1:], 1):
        if (verbose and
            (i % 10**(len(str(i))-1) == 0 or i == len(cms)-1)):
            print("  Frame   {:12d} of {:12d}"
                  .format(i, len(cms)-1),
                  flush=True)
            print("    Elapsed time:             {}"
                  .format(datetime.now()-timer),
                  flush=True)
            print("    Current memory usage: {:18.2f} MiB"
                  .format(proc.memory_info().rss/2**20),
                  flush=True)
            timer = datetime.now()
        
        frame = np.uint32(begin + i*every)
        pos = get_pos(universe=universe,
                      atm_grp=ref,
                      frame=frame,
                      compound=compound,
                      debug=debug)
        bound_now_and_before = cm.multiply(cms[i-1])
        
        attached = cm - bound_now_and_before
        refix, selix = attached.nonzero()
        if len(refix) > 0 and np.any(refix2refix_t0[refix] < 0):
            refix_unique, selix = mdt.nph.group_by(
                                      keys=refix.astype(np.uint32),
                                      values=selix.astype(np.uint32),
                                      assume_sorted=True,
                                      return_keys=True)
            for j, rix in enumerate(refix_unique):
                if refix2refix_t0[rix] >= 0:
                    # There is already a t0 for reference compound rix
                    continue
                selix_t0.append(selix[j])
                refix2refix_t0[rix] = len(refix_t0)
                refix_t0.append(np.uint32(rix))
                t0.append(frame)
                trenew.append(np.nan)
                pos_t0.append(pos[rix])
                displ.append(np.full(3, np.nan, dtype=np.float32))
        
        detached = cms[i-1] - bound_now_and_before
        refix, selix = detached.nonzero()
        if len(refix) > 0 and np.any(refix2refix_t0[refix] >= 0):
            refix_unique, selix = mdt.nph.group_by(
                                      keys=refix.astype(np.uint32),
                                      values=selix.astype(np.uint32),
                                      assume_sorted=True,
                                      return_keys=True)
            for j, rix in enumerate(refix_unique):
                rix_t0 = refix2refix_t0[rix]
                if rix_t0 < 0:
                    # There is no t0 for reference compound rix
                    continue
                remain = np.isin(selix_t0[rix_t0],
                                 test_elements=selix[j],
                                 assume_unique=True,
                                 invert=True)
                if not np.any(remain):
                    # Last selection compound(s) that was (were) bound to
                    # reference compound rix at time t0 got detached
                    selix_t0[rix_t0] = selix_t0[rix_t0][0]
                    trenew[rix_t0] = frame - t0[rix_t0]
                    np.subtract(pos[rix], pos_t0[rix_t0], out=displ[rix_t0])
                    selix_bound = cm[rix].nonzero()[1]
                    if len(selix_bound) == 0:
                        refix2refix_t0[rix] = -1
                    else:
                        selix_t0.append(selix_bound)
                        refix2refix_t0[rix] = len(refix_t0)
                        refix_t0.append(np.uint32(rix))
                        t0.append(frame)
                        trenew.append(np.nan)
                        pos_t0.append(pos[rix])
                        displ.append(np.full(3, np.nan, dtype=np.float32))
                else:
                    selix_t0[rix_t0] = selix_t0[rix_t0][remain]
    
    
    del refix, selix, refix_unique, refix2refix_t0, pos
    del cm, bound_now_and_before, detached
    
    if len(selix_t0) != len(refix_t0):
        raise ValueError("The number of selection indices does not match"
                         " the number of reference indices. This should"
                         " not have happened")
    if len(t0) != len(refix_t0):
        raise ValueError("The number of start times does not match the"
                         " number of reference indices. This should not"
                         " have happened")
    if len(trenew) != len(refix_t0):
        raise ValueError("The number of renewal times does not match the"
                         " number of reference indices. This should not"
                         " have happened")
    if len(pos_t0) != len(refix_t0):
        raise ValueError("The number of start positions does not match"
                         " the number of reference indices. This should"
                         " not have happened")
    if len(displ) != len(refix_t0):
        raise ValueError("The number of displacements does not match the"
                         " number of reference indices. This should not"
                         " have happened")
    
    refix_t0 = np.asarray(refix_t0, dtype=np.uint32)
    selix_t0 = np.asarray(selix_t0, dtype=object)
    t0 = np.asarray(t0, dtype=np.float32)
    trenew = np.asarray(trenew, dtype=np.float32)
    pos_t0 = np.row_stack(pos_t0)
    displ = np.row_stack(displ)
    
    # Remove the first renewal event for each reference compound since
    # you cannot say what is t0 for these events. Also remove the last
    # events where a start time t0 is already set, but a renewal was not
    # seen
    valid = np.isfinite(t0) & np.isfinite(trenew)
    refix_t0 = refix_t0[valid]
    selix_t0 = selix_t0[valid].astype(np.uint32)
    t0 = t0[valid].astype(np.uint32)
    trenew = trenew[valid].astype(np.uint32)
    pos_t0 = pos_t0[valid]
    displ = displ[valid]
    
    ix_sort = np.argsort(refix_t0)
    refix_t0 = refix_t0[ix_sort]
    selix_t0 = selix_t0[ix_sort]
    t0 = t0[ix_sort]
    trenew = trenew[ix_sort]
    pos_t0 = pos_t0[ix_sort]
    displ = displ[ix_sort]
    
    return refix_t0, selix_t0, t0, trenew, pos_t0, displ








if __name__ == '__main__':
    
    timer_tot = datetime.now()
    proc = psutil.Process(os.getpid())
    
    
    parser = argparse.ArgumentParser(
                 description=(
                     "Extract renewal events from a molecules dynamics"
                     " trajectory. A renewal event occurs when the"
                     " selection compound that was continuously bound"
                     " the longest to a reference compound dissociates"
                     " from it. A new trajectory is generated containing"
                     " only these renewal events for all reference"
                     " compounds. The new trajectory contains the"
                     " indices of the reference and selection compound,"
                     " the time t0 when the selection compound started"
                     " coordinating to the reference compound, the"
                     " renewal time tau needed till dissociation of the"
                     " selection compound, the positions of the"
                     " reference compound at t0 and the displacement of"
                     " the reference compound during tau."
                     )
    )
    
    parser.add_argument(
        '-f',
        dest='TRJFILE',
        type=str,
        required=True,
        help="Trajectory file [<.trr/.xtc/.gro/.pdb/.xyz/.mol2/...>]."
             " See supported coordinate formats of MDAnalysis. IMPORTANT:"
             " At least the reference compounds must be whole and"
             " unwrapped in order to get the correct displacements. You"
             " can use 'unwrap_trj' to unwrap a wrapped trajectory and"
             " make broken molecules whole."
    )
    parser.add_argument(
        '-s',
        dest='TOPFILE',
        type=str,
        required=True,
        help="Topology file [<.top/.tpr/.gro/.pdb/.xyz/.mol2/...>]. See"
             " supported topology formats of MDAnalysis."
    )
    parser.add_argument(
        '-o',
        dest='OUTFILE',
        type=str,
        required=True,
        help="Output filename."
    )
    
    parser.add_argument(
        '--ref',
        dest='REF',
        type=str,
        nargs='+',
        required=True,
        help="Reference group. See MDAnalysis selection commands for"
             " possible choices. E.g. 'name Li'"
    )
    parser.add_argument(
        "--sel",
        dest="SEL",
        type=str,
        nargs="+",
        required=True,
        help="Selection group. See MDAnalysis selection commands for"
             " possible choices. E.g. 'type OE'"
    )
    parser.add_argument(
        '-c',
        dest='CUTOFF',
        type=float,
        required=True,
        help="Cutoff distance in Angstrom. A reference and selection"
             " atom are considered to be in contact, if their distance"
             " is less than or equal to this cutoff."
    )
    parser.add_argument(
        '--compound',
        dest='COMPOUND',
        type=str,
        required=False,
        default="atoms",
        help="Contacts between the reference and selection group can be"
             " computed either for individual 'atoms', 'segments',"
             " 'residues', or 'fragments'. Refer to the MDAnalysis user"
             " guide for the meaning of these terms"
             " (https://userguide.mdanalysis.org/1.0.0/groups_of_atoms.html)."
             " This option also affects how displacements are calculated."
             " If not set to 'atoms', the center of mass of the compound"
             " is used to calculate its displacement. Default: 'atoms'"
    )
    parser.add_argument(
        '--min-contacts',
        dest='MINCONTACTS',
        type=int,
        required=False,
        default=1,
        help="Compounds of the reference and selection group are only"
             " considered to be in contact, if there are at least"
             " MINCONTACTS contacts between the atoms of the compounds."
             " --min-contacts is ignored if --compound is set to"
             " 'atoms'. Default: 1"
    )
    parser.add_argument(
        '--intermittency',
        dest='INTERMITTENCY',
        type=int,
        required=False,
        default=0,
        help="Maximum numer of frames a selection atom is allowed to"
             " leave the cutoff range of a reference atom whilst still"
             " being considered to be bound to the reference atom,"
             " provided that it is indeed bound again to the reference"
             " atom after this unbound period. The other way round, a"
             " selection atom is only considered to be bound to a"
             " reference atom, if it has been bound to it for at least"
             " this number of consecutive frames. Default: 0"
    )
    
    parser.add_argument(
        '-b',
        dest='BEGIN',
        type=int,
        required=False,
        default=0,
        help="First frame to read. Frame numbering starts at zero."
             " Default: 0"
    )
    parser.add_argument(
        "-e",
        dest="END",
        type=int,
        required=False,
        default=-1,
        help="Last frame to read (exclusive, i.e. the last frame read is"
             " actually END-1). Default: -1 (means read the very last"
             " frame of the trajectory)"
    )
    parser.add_argument(
        '--every',
        dest='EVERY',
        type=int,
        required=False,
        default=1,
        help="Read every n-th frame. Default: 1"
    )
    
    parser.add_argument(
        '--debug',
        dest='DEBUG',
        required=False,
        default=False,
        action='store_true',
        help="Run in debug mode."
    )
    
    
    args = parser.parse_args()
    print(mdt.rti.run_time_info_str())
    
    
    if args.CUTOFF <= 0:
        raise ValueError("-c must be greater than zero, but you gave {}"
                         .format(args.CUTOFF))
    if (args.COMPOUND != 'atoms' and
        args.COMPOUND != 'segments' and
        args.COMPOUND != 'residues' and
        args.COMPOUND != 'fragments'):
        raise ValueError("--compound must be either 'atoms', 'segments',"
                         " 'residues' or 'fragments', but you gave {}"
                         .format(args.COMPOUND))
    if args.MINCONTACTS < 1:
        raise ValueError("--min-contacts must be greater than zero, but"
                         " you gave {}"
                         .format(args.MINCONTACTS))
    if args.MINCONTACTS > 1 and args.COMPOUND == 'atoms':
        args.MINCONTACTS = 1
        print("\n\n\n", flush=True)
        print("Note: Setting --min-contacts to {}, because --compound\n"
              "  is set to 'atoms'".format(args.MINCONTACTS), flush=True)
    if args.INTERMITTENCY < 0:
        raise ValueError("--intermittency must be equal to or greater"
                         " than zero, but you gave {}"
                         .format(args.INTERMITTENCY))
    
    
    
    
    print("\n\n\n", flush=True)
    u = mdt.select.universe(top=args.TOPFILE,
                            trj=args.TRJFILE,
                            verbose=True)
    
    
    print("\n\n\n", flush=True)
    print("Creating selections", flush=True)
    timer = datetime.now()
    
    ref = u.select_atoms(' '.join(args.REF))
    sel = u.select_atoms(' '.join(args.SEL))
    print("  Reference group: '{}'"
          .format(' '.join(args.REF)),
          flush=True)
    print(mdt.rti.ag_info_str(ag=ref, indent=4))
    print(flush=True)
    print("  Selection group: '{}'"
          .format(' '.join(args.SEL)),
          flush=True)
    print(mdt.rti.ag_info_str(ag=sel, indent=4))
    
    if ref.n_atoms <= 0:
        raise ValueError("The reference atom group contains no atoms")
    if sel.n_atoms <= 0:
        raise ValueError("The selection atom group contains no atoms")
    
    print("Elapsed time:         {}"
          .format(datetime.now()-timer),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
    
    
    
    
    BEGIN, END, EVERY, n_frames = mdt.check.frame_slicing(
                                      start=args.BEGIN,
                                      stop=args.END,
                                      step=args.EVERY,
                                      n_frames_tot=u.trajectory.n_frames)
    last_frame = u.trajectory[END-1].frame
    if args.DEBUG:
        print("\n\n\n", flush=True)
        mdt.check.time_step(trj=u.trajectory[BEGIN:END], verbose=True)
    timestep = u.trajectory[BEGIN].dt
    start_time = u.trajectory[BEGIN].time
    
    
    
    
    print("\n\n\n", flush=True)
    print("Calculating contact matrices", flush=True)
    print("  Total number of frames in trajectory: {:>9d}"
          .format(u.trajectory.n_frames),
          flush=True)
    print("  Time step per frame:                  {:>9} (ps)\n"
          .format(u.trajectory[0].dt),
          flush=True)
    timer = datetime.now()
    
    cms = mdt.strc.contact_matrices(topfile=args.TOPFILE,
                                    trjfile=args.TRJFILE,
                                    ref=args.REF,
                                    sel=args.SEL,
                                    cutoff=args.CUTOFF,
                                    compound=args.COMPOUND,
                                    min_contacts=args.MINCONTACTS,
                                    begin=BEGIN,
                                    end=END,
                                    every=EVERY,
                                    verbose=True,
                                    debug=args.DEBUG)
    if len(cms) != n_frames:
        raise ValueError("The number of contact matrices does not equal"
                         " the number of frames to read. This should not"
                         " have happened")
    
    print(flush=True)
    print("Frames read: {}".format(n_frames), flush=True)
    print("First frame: {:>12d}    Last frame: {:>12d}    "
          "Every Nth frame: {:>12d}"
          .format(u.trajectory[BEGIN].frame, last_frame, EVERY),
          flush=True)
    print("Start time:  {:>12}    End time:   {:>12}    "
          "Every Nth time:  {:>12} (ps)"
          .format(u.trajectory[BEGIN].time,
                  u.trajectory[END-1].time,
                  u.trajectory[0].dt * EVERY),
          flush=True)
    print("Elapsed time:         {}"
          .format(datetime.now()-timer),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
    
    
    
    
    if args.INTERMITTENCY > 0:
        print("\n\n\n", flush=True)
        print("Correcting for intermittency", flush=True)
        timer = datetime.now()
        
        cms = mdt.dyn.correct_intermittency(
                  list_of_arrays=cms,
                  intermittency=args.INTERMITTENCY,
                  verbose=True,
                  debug=args.DEBUG)
        
        print("Elapsed time:         {}"
              .format(datetime.now()-timer),
              flush=True)
        print("Current memory usage: {:.2f} MiB"
              .format(proc.memory_info().rss/2**20),
              flush=True)
    
    
    
    
    print("\n\n\n", flush=True)
    print("Extracting renewal events", flush=True)
    timer = datetime.now()
    
    data = np.column_stack(extract_renewal_events(universe=u,
                                                  ref=ref,
                                                  cms=cms,
                                                  compound=args.COMPOUND,
                                                  begin=BEGIN,
                                                  every=EVERY,
                                                  verbose=True,
                                                  debug=args.DEBUG))
    del cms
    
    if len(data) == 0:
        raise ValueError("Could not detect any renewal event")
    
    data[:,2] = start_time + data[:,2]*timestep*EVERY
    data[:,3] *= timestep*EVERY
    
    print(flush=True)
    print("Elapsed time:         {}"
          .format(datetime.now()-timer),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
    
    
    
    
    print("\n\n\n", flush=True)
    print("Creating output", flush=True)
    timer = datetime.now()
    
    header = (
        "Trajectory of renewal events. A renewal event occurs when the\n"
        "selection compound that was continuously bound the longest to\n"
        "a reference compound dissociates from it.\n"
        "\n"
        "\n"
        "Total number of renewal events:          {:>16d}\n"
        "Mean square displacement r^2 the reference compounds travel\n"
        "while bound to the selection compound: {:>16.9e} (A^2)\n"
        "Standard deviation of r^2:             {:>16.9e} (A^2)\n"
        "\n"
        "\n"
        "Cutoff (Angstrom)     = {}\n"
        "Compound              = {}\n"
        "Minimum contacts      = {}\n"
        "Allowed intermittency = {}\n"
        "\n"
        "\n"
        "Reference: '{}'\n"
        "  Segments:               {}\n"
        "    Different segments:   {}\n"
        "    Segment name(s):      '{}'\n"
        "  Residues:               {}\n"
        "    Different residues:   {}\n"
        "    Residue name(s):      '{}'\n"
        "  Atoms:                  {}\n"
        "    Different atom names: {}\n"
        "    Atom name(s):         '{}'\n"
        "    Different atom types: {}\n"
        "    Atom type(s):         '{}'\n"
        "  Fragments:              {}\n"
        "\n"
        "Selection: '{}'\n"
        "  Segments:               {}\n"
        "    Different segments:   {}\n"
        "    Segment name(s):      '{}'\n"
        "  Residues:               {}\n"
        "    Different residues:   {}\n"
        "    Residue name(s):      '{}'\n"
        "  Atoms:                  {}\n"
        "    Different atom names: {}\n"
        "    Atom name(s):         '{}'\n"
        "    Different atom types: {}\n"
        "    Atom type(s):         '{}'\n"
        "  Fragments:              {}\n"
        "\n"
        "\n"
        "The columns contain:\n"
        "   1    Index of the reference compound (indexing starts at zero)\n"
        "   2    Index of the longest continuously bound selection\n"
        "        compound (indexing starts at zero)\n"
        "   3    Start time t0 (ps) at which the selection compound\n"
        "        starts to coordinate to the reference compound\n"
        "   4    Renewal time tau (ps). Time after which the selection\n"
        "        compound dissociates from the reference compound\n"
        "   5- 7 x, y and z coordinate (A) of the reference compound\n"
        "        at t0\n"
        "   8-10 x, y and z displacement (A) of the reference compound\n"
        "        during tau\n"
        "\n"
        "Column number:\n"
        "{:>14d} {:>16d} {:>16d} {:>16d} {:>16d} {:>16d} {:>16d} {:>16d} {:>16d} {:>16d}\n"
        "\n"
        "              {:>51s} {:>67s} {:>16s} {:>16s}\n"
        "Mean:          {:>50.9e} {:>67.9e} {:>16.9e} {:>16.9e}\n"
        "Std. Dev.:     {:>50.9e} {:>67.9e} {:>16.9e} {:>16.9e}\n"
        "\n"
        "{:>14s} {:>16s} {:>16s} {:>16s} {:>16s} {:>16s} {:>16s} {:>16s} {:>16s} {:>16s}"
        .format(len(data),
                np.mean(np.sum(data[:,7:]**2, axis=1)),
                np.std(np.sum(data[:,7:]**2, axis=1)),
                
                args.CUTOFF,
                args.COMPOUND,
                args.MINCONTACTS,
                args.INTERMITTENCY,
                
                ' '.join(args.REF),
                ref.n_segments,
                len(np.unique(ref.segids)),
                '\' \''.join(i for i in np.unique(ref.segids)),
                ref.n_residues,
                len(np.unique(ref.resnames)),
                '\' \''.join(i for i in np.unique(ref.resnames)),
                ref.n_atoms,
                len(np.unique(ref.names)),
                '\' \''.join(i for i in np.unique(ref.names)),
                len(np.unique(ref.types)),
                '\' \''.join(i for i in np.unique(ref.types)),
                len(ref.fragments),
                
                ' '.join(args.SEL),
                sel.n_segments,
                len(np.unique(sel.segids)),
                '\' \''.join(i for i in np.unique(sel.segids)),
                sel.n_residues,
                len(np.unique(sel.resnames)),
                '\' \''.join(i for i in np.unique(sel.resnames)),
                sel.n_atoms,
                len(np.unique(sel.names)),
                '\' \''.join(i for i in np.unique(sel.names)),
                len(np.unique(sel.types)),
                '\' \''.join(i for i in np.unique(sel.types)),
                len(sel.fragments),
                
                1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
                
                "Renewal time (ps)",
                "MSD x^2 (A^2)",
                "MSD y^2 (A^2)",
                "MSD z^2 (A^2)",
                np.mean(data[:,3]),
                np.mean(data[:,7]**2),
                np.mean(data[:,8]**2),
                np.mean(data[:,9]**2),
                np.std(data[:,3]),
                np.std(data[:,7]**2),
                np.std(data[:,8]**2),
                np.std(data[:,9]**2),
                
                "ref_ix", "sel_ix", "t0", "tau_renew",
                "x(t0)", "y(t0)", "z(t0)", "dx", "dy", "dz"
        )
    )
    
    mdt.fh.savetxt(fname=args.OUTFILE,
                   data=data,
                   header=header)
    
    print("  Created {}".format(args.OUTFILE))
    print("Elapsed time:         {}"
          .format(datetime.now()-timer),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
    
    
    
    
    print("\n\n\n{} done".format(os.path.basename(sys.argv[0])))
    print("Elapsed time:         {}"
          .format(datetime.now()-timer_tot),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
