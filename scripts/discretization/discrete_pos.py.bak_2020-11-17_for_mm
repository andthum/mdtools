#!/usr/bin/env python3


# This file is part of MDTools.
# Copyright (C) 2020  Andreas Thum
#
# MDTools is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# MDTools is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with MDTools.  If not, see <http://www.gnu.org/licenses/>.




import sys
import os
from datetime import datetime
import psutil
import argparse
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import MaxNLocator
import mdtools as mdt


plt.rc('lines', linewidth=2)
plt.rc('axes', linewidth=2)
plt.rc('xtick.major', width=2)
plt.rc('xtick.minor', width=2)
plt.rc('ytick.major', width=2)
plt.rc('ytick.minor', width=2)
plt.rc('text', usetex=True)
plt.rcParams['text.latex.preview'] = True
plt.rc('font',**{'family' : 'serif', 'serif' : 'Times'})




if __name__ == "__main__":
    
    timer_tot = datetime.now()
    proc = psutil.Process(os.getpid())
    
    
    parser = argparse.ArgumentParser(
                 description=(
                     "Discretize the positions of the compounds of a"
                     " given selection group in a given spatial"
                     " direction. Works currently only for orthogonal"
                     " simulation boxes. The obtained discretized"
                     " trajectory can e.g. be used for further"
                     " processing with PyEMMA tools to calculate hopping"
                     " rates and to estimate a Markov model. The"
                     " intended workfow for constructing Markov models"
                     " is as follows (see also Prinz et al., JCP, 2011,"
                     " 134, 174105):"
                     " 1) Discretize the trajectory with this script."
                     " 2) From the discretized trajectory, calculate the"
                     " implied timescales with pyemma_its.py."
                     " 3) From the implied timescales anaylsis, choose"
                     " the time at which the few largest timescales"
                     " converge as lag time for the estimation of the"
                     " Markov model. The Markov model can be estimated"
                     " with pyemma_mm.py which needs the discretized"
                     " trajectory as input. If the timescales from step"
                     " 2) do not converge or only converge at a lag time"
                     " equal to or greater than the timescale itself,"
                     " repeat step 1) with another bin width."
                     " 4) Check the Markovianity of the estimated model"
                     " by conducting a Chapman-Kolmogorow test with"
                     " pyemma_cktest.py."
                     " Of course, you can use the discretized trajectory"
                     " also for other analyses than Markov modelling."
                 )
    )
    
    parser_bins = parser.add_mutually_exclusive_group()
    
    parser.add_argument(
        '-f',
        dest='TRJFILE',
        type=str,
        required=True,
        help="Trajectory file [<.trr/.xtc/.gro/.pdb/.xyz/.mol2/...>]."
             " See supported coordinate formats of MDAnalysis."
    )
    parser.add_argument(
        '-s',
        dest='TOPFILE',
        type=str,
        required=True,
        help="Topology file [<.top/.tpr/.gro/.pdb/.xyz/.mol2/...>]. See"
             " supported topology formats of MDAnalysis."
    )
    parser.add_argument(
        '-o',
        dest='OUTFILE',
        type=str,
        required=True,
        help="Output filename pattern. There will be created two or"
             " three ouput files:"
             " <OUTFILE>_traj.npy containing a discretized trajectory"
             " for each particle in the selection stored as numpy.uint32"
             " numpy.ndarray in the binary .npy format;"
             " <OUTFILE>_traj.pdf containing a plot of the discretized"
             " trajectories versus time;"
             " <OUTFILE>_bins.npy containing the (average) bin edges"
             " in Angstrom stored as numpy.float64 numpy.ndarray in the"
             " binary .npy format. Note that bin intervals are left-"
             "closed and right-open, i.e. [a, b) -> a <= x < b. The last"
             " stored bin edge is always the maximum box length in the"
             " chosen direction. Thus, the number of bins is always the"
             " length of the stored array."
             " The files can be directly processed by pyemma_its.py and"
             " pyemma_mm.py."
    )
    parser.add_argument(
        '--no-plots',
        dest='NOPLOTS',
        required=False,
        default=False,
        action='store_true',
        help="Do not create plots."
    )
    parser.add_argument(
        '--decs',
        dest='DECS',
        type=int,
        required=False,
        default=1,
        help="Number of decimal places for the tick labels of the"
             " secondary y-axis. Default: 1"
    )
    
    parser.add_argument(
        '--sel',
        dest='SEL',
        type=str,
        nargs='+',
        required=True,
        help="Selection group whose spatial coordinates shall be"
             " discretized. See MDAnalysis' selection command for"
             " possible choices. E.g. 'name Li'"
    )
    parser.add_argument(
        '--com',
        dest='COM',
        type=str,
        required=False,
        default=None,
        help="Use the center of mass for discretization rather than"
             " discretizing the spatial coordinates of each individual"
             " atom of the selection group. COM can be either 'group',"
             " 'segments', 'residues' or 'fragments'. If 'group', the"
             " center of mass of all atoms in the selection group will"
             " be used. Else, the centers of mass of each segment,"
             " residue or fragment of the selection group will be used."
             " Compounds will be made whole before calculating their"
             " centers of mass. See the MDAnalysis user guide"
             " (https://userguide.mdanalysis.org/groups_of_atoms.html)"
             " for the definition of the terms. Default is 'None'"
    )
    
    parser.add_argument(
        '-b',
        dest='BEGIN',
        type=int,
        required=False,
        default=0,
        help="First frame to read. Frame numbering starts at zero."
             " Default: 0"
    )
    parser.add_argument(
        '-e',
        dest='END',
        type=int,
        required=False,
        default=-1,
        help="Last frame to read (exclusive, i.e. the last frame read is"
             " actually END-1). Default: -1 (means read the very last"
             " frame of the trajectory)"
    )
    parser.add_argument(
        '--every',
        dest='EVERY',
        type=int,
        required=False,
        default=1,
        help="Read every n-th frame. Default: 1"
    )
    
    parser.add_argument(
        '-d',
        dest='DIRECTION',
        type=str,
        default='z',
        help="The spatial direction along which the discretization is"
             " done. Must be either x, y or z. Default: z"
    )
    parser.add_argument(
        '--pbc',
        dest='PBC',
        required=False,
        default=False,
        action='store_true',
        help="Take periodic boundary conditions into account, i.e. shift"
             " the population of the last bin to the first bin."
    )
    parser.add_argument(
        '--bin-start',
        dest='START',
        type=float,
        required=False,
        default=0,
        help="Point (in Angstrom) on the chosen spatial direction to"
             " start binning. Default: 0"
    )
    parser.add_argument(
        '--bin-end',
        dest='STOP',
        type=float,
        required=False,
        default=None,
        help="Point (in Angstrom) on the chosen spatial direction to"
             " stop binning. Note that --bin-start and --bin-end must"
             " lie within the simulation box as obtained from the first"
             " frame read. Also note that the discretization is done on"
             " wrapped coordinates and not in real space. Default:"
             " Maximum simulation box length in this direction as"
             " obtained from the first frame read."
    )
    parser_bins.add_argument(
        '--bin-num',
        dest='NUM',
        type=int,
        required=False,
        default=100,
        help="Number of bins to use. Must not be used together with"
             " --bin-width. Must be at least 3 if --pbc is set and at"
             " least 2 otherwise. When using --bin-num, bins are"
             " rescaled when the simulation box is fluctuating (usually"
             " due to pressure scaling). In other words, the"
             " discretization is effectively done in relative box"
             " coordinates. Note that this script has NOT been TESTED"
             " with fluctuating boxes! Default: 100"
    )
    parser_bins.add_argument(
        '--bin-width',
        dest='STEP',
        type=int,
        required=False,
        default=None,
        help="Width of the created bins. Must not be used together with"
             " --bin-num. Note that --bin-num is recommended over"
             " --bin-width. When using --bin-width, bins are not"
             " rescaled when the simulation box is fluctuating. If the"
             " discretization is done over the whole box length and the"
             " box is fluctuating, bins might be created or deleted."
             " This might result in wrong Markov models. Default: None"
    )
    parser.add_argument(
        '--bins',
        dest='BINFILE',
        type=str,
        required=False,
        default=None,
        help="ASCII formatted text file containing custom bin edges. Bin"
             " edges are read from the first column, lines starting with"
             " '#' are ignored. Bins do not need to be equidistant. Bins"
             " are rescaled when the simulation box is fluctuating. Note"
             " that all bin edges must lie within the simulation box as"
             " obtained from the first frame read. Also note that the"
             " discretization is done on wrapped coordinates and not in"
             " real space. If --bins is given, this takes precedence"
             " over all other bin flags."
    )
    
    parser.add_argument(
        '--debug',
        dest='DEBUG',
        required=False,
        default=False,
        action='store_true',
        help="Run in debug mode."
    )
    
    
    args = parser.parse_args()
    print(mdt.rti.run_time_info_str())
    
    
    if (args.COM is not None and
        args.COM != 'group' and
        args.COM != 'segments' and
        args.COM != 'residues' and
        args.COM != 'fragments'):
        raise ValueError("--com must be either 'group', 'segments',"
                         " 'residues' or 'fragments', but you gave {}"
                         .format(args.COM))
    if (args.DIRECTION != 'x' and
        args.DIRECTION != 'y' and
        args.DIRECTION != 'z'):
        raise ValueError("-d must be either 'x', 'y' or 'z', but you"
                         " gave {}".format(args.DIRECTION))
    dim = {'x': 0, 'y': 1, 'z': 2}
    
    
    
    
    print("\n\n\n", flush=True)
    u = mdt.select.universe(top=args.TOPFILE,
                            trj=args.TRJFILE,
                            verbose=True)
    
    print("\n\n\n", flush=True)
    sel = mdt.select.atoms(ag=u,
                           sel=' '.join(args.SEL),
                           verbose=True)
    if sel.n_atoms == 0:
        raise ValueError("The selection group contains no atoms")
    if args.COM is not None:
        print("\n\n\n", flush=True)
        mdt.check.masses(ag=sel, flash_test=False)
    
    
    
    
    BEGIN, END, EVERY, n_frames = mdt.check.frame_slicing(
                                      start=args.BEGIN,
                                      stop=args.END,
                                      step=args.EVERY,
                                      n_frames_tot=u.trajectory.n_frames)
    last_frame = u.trajectory[END-1].frame
    if args.DEBUG:
        print("\n\n\n", flush=True)
        mdt.check.time_step(trj=u.trajectory[BEGIN:END], verbose=True)
    
    
    
    
    lbox = u.trajectory[BEGIN].dimensions[dim[args.DIRECTION]]
    
    if args.BINFILE is None:
        if args.PBC and args.NUM < 3:
            args.NUM = 3
            print("\n\n\n", flush=True)
            print("Note: Set --bin-num to 3, because --pbc is set")
        elif not args.PBC and args.NUM < 2:
            args.NUM = 2
            print("\n\n\n", flush=True)
            print("Note: Set --bin-num to 2")
        
        if args.STOP is None:
            STOP = lbox
        else:
            STOP = args.STOP
        
        START, STOP, STEP, NUM = mdt.check.bins(start=args.START,
                                                stop=STOP,
                                                step=args.STEP,
                                                num=args.NUM,
                                                amin=0,
                                                amax=lbox)
        
        if args.STEP is None:
            rescale_bins = True
            if START == 0 and np.isclose(STOP, lbox):
                bin_tot_box = True
                bins = np.linspace(START+STEP,
                                   STOP-STEP*(1-args.PBC),
                                   NUM-1+args.PBC)
            elif START == 0 and not np.isclose(STOP, lbox):
                bin_tot_box = False
                bins = np.linspace(START+STEP, STOP, NUM)
            elif START != 0 and np.isclose(STOP, lbox):
                bin_tot_box = False
                bins = np.linspace(START,
                                   STOP-STEP*(1-args.PBC),
                                   NUM+args.PBC)
            elif START != 0 and not np.isclose(STOP, lbox):
                bin_tot_box = False
                bins = np.linspace(START, STOP, NUM+1)
        else:
            rescale_bins = False
            NUM = int((STOP - START) / STEP)
            remainder = (STOP - START) % STEP
            if START == 0 and np.isclose(STOP, lbox):
                bin_tot_box = True
                bins = np.linspace(START+STEP,
                                   STOP-STEP*(1-args.PBC)-remainder,
                                   NUM-1+args.PBC)
            elif START == 0 and not np.isclose(STOP, lbox):
                bin_tot_box = False
                bins = np.linspace(START+STEP, STOP-remainder, NUM)
            elif START != 0 and np.isclose(STOP, lbox):
                bin_tot_box = False
                bins = np.linspace(START,
                                   STOP-STEP*(1-args.PBC)-remainder,
                                   NUM+args.PBC)
            elif START != 0 and not np.isclose(STOP, lbox):
                bin_tot_box = False
                bins = np.linspace(START, STOP-remainder, NUM+1)
            if remainder > 0 and np.isclose(STOP, lbox):
                bins = np.append(bins, STOP-STEP*(1-args.PBC))
            elif remainder > 0 and not np.isclose(STOP, lbox):
                bins = np.append(bins, STOP)
        
    else:
        bins = np.loadtxt(args.BINFILE, usecols=0)
        bins = np.unique(bins)
        if bins.size == 0:
            raise ValueError("Invalid bins")
        
        START = bins[0]
        STOP = bins[-1]
        rescale_bins = True
        if START == 0 and np.isclose(STOP, lbox):
            bin_tot_box = True
            bins = bins[1:-1]
        elif START == 0 and not np.isclose(STOP, lbox):
            bin_tot_box = False
            bins = bins[1:]
        elif START != 0 and np.isclose(STOP, lbox):
            bin_tot_box = False
            bins = bins[:-1]
        elif START != 0 and not np.isclose(STOP, lbox):
            bin_tot_box = False
    
    if args.PBC and not np.isclose(bins[-1], lbox):
        bins = np.append(bins, lbox)
    bins_av = bins
    
    if START < 0:
        raise ValueError("The first bin edge ({}) lies outside the"
                         " simulation box ({})".format(START, 0))
    if not np.isclose(STOP, lbox) and STOP > lbox:
        raise ValueError("The last bin edge ({}) lies outside the"
                         " simulation box ({})".format(STOP, lbox))
    if (args.PBC and len(bins) < 2) or (not args.PBC and len(bins) < 1):
        raise ValueError("The number of bins ({}) is less than 2"
                         .format(len(bins)-1 + bin_tot_box))
    
    if START == 0:
        bin_width_first = bins[0] - START
    else:
        bin_width_first = bins[1] - bins[0]
    if np.isclose(STOP, lbox):
        bin_width_last = STOP - bins[-1]
    else:
        bin_width_last = bins[-1] - bins[-2]
    print("\n\n\n", flush=True)
    print("Bins", flush=True)
    print("  Start:                 {:>12.6f} (A)"
          .format(bins[0]-(START==0)*bin_width_first),
          flush=True)
    print("  Stop:                  {:>12.6f} (A)"
          .format(bins[-1]+np.isclose(STOP, lbox)*bin_width_last),
          flush=True)
    print("  First bin width:       {:>12.6f} (A)"
          .format(bin_width_first),
          flush=True)
    print("  Last bin width:        {:>12.6f} (A)"
          .format(bin_width_last),
          flush=True)
    print("  Equidistant bins:      {:>5s}"
          .format(str(np.all(np.isclose(np.diff(bins), bin_width_last))
                      and np.isclose(bin_width_first, bin_width_last))),
          flush=True)
    print("  Number of bins:        {:>5d}"
          .format(len(bins)+1-args.PBC),
          flush=True)
    print("  Rescale bins with box: {:>5s}"
          .format(str(rescale_bins)),
          flush=True)
    print("  Bin entire box length: {:>5s}"
          .format(str(bin_tot_box)),
          flush=True)
    #print("  Bins to use for first frame:", flush=True)
    #print(bins, flush=True)
    
    
    
    
    # Discretized single-particle trajectories compatible with PyEMMA's
    # MSM model
    if args.COM is None:
        dtrajs = np.zeros((n_frames, sel.n_atoms), dtype=np.uint32)
        n_particles = sel.n_atoms
    elif args.COM == 'group':
        dtrajs = np.zeros(n_frames, dtype=np.uint32)
        n_particles = 1
    elif args.COM == 'segments':
        dtrajs = np.zeros((n_frames, sel.n_segments), dtype=np.uint32)
        n_particles = sel.n_segments
    elif args.COM == 'residues':
        dtrajs = np.zeros((n_frames, sel.n_residues), dtype=np.uint32)
        n_particles = sel.n_residues
    elif args.COM == 'fragments':
        dtrajs = np.zeros((n_frames, sel.n_fragments), dtype=np.uint32)
        n_particles = sel.n_fragments
    
    
    
    
    print("\n\n\n", flush=True)
    print("Reading trajectory", flush=True)
    print("  Total number of frames in trajectory: {:>9d}"
          .format(u.trajectory.n_frames),
          flush=True)
    print("  Time step per frame:                  {:>9} (ps)\n"
          .format(u.trajectory[0].dt),
          flush=True)
    timer = datetime.now()
    timer_frame = datetime.now()
    
    lbox_av = 0
    n_bin_renewals = 0
    for i, ts in enumerate(u.trajectory[BEGIN:END:EVERY]):
        if (ts.frame % 10**(len(str(ts.frame))-1) == 0 or
            ts.frame == END-1):
            print("  Frame   {:12d}".format(ts.frame), flush=True)
            print("    Step: {:>12}    Time: {:>12} (ps)"
                  .format(ts.data['step'], ts.data['time']),
                  flush=True)
            print("    Elapsed time:             {}"
                  .format(datetime.now()-timer_frame),
                  flush=True)
            print("    Current memory usage: {:18.2f} MiB"
                  .format(proc.memory_info().rss/2**20),
                  flush=True)
            timer_frame = datetime.now()
        
        if args.COM is None:
            coord = mdt.box.wrap(ag=sel, debug=args.DEBUG)
        else:
            mdt.box.make_whole(ag=sel,
                               compound=args.COM,
                               debug=args.DEBUG)
            coord = mdt.strc.com(ag=sel,
                                 pbc=True,
                                 compound=args.COM,
                                 debug=args.DEBUG)
        
        if args.DEBUG:
            mdt.check.box(box=ts.dimensions,
                          with_angles=True,
                          orthorhombic=True,
                          dim=1)
            mdt.check.pos_array(pos_array=coord,
                                  shape=(n_particles, 3),
                                  amin=0,
                                  amax=ts.dimensions[:3])
        
        coord = coord[:,dim[args.DIRECTION]]
        lbox_av += ts.dimensions[dim[args.DIRECTION]]
        # The bins only need to be renewed if the box was rescaled
        if lbox != ts.dimensions[dim[args.DIRECTION]]:
            lbox_prev = lbox
            lbox = ts.dimensions[dim[args.DIRECTION]]
            if rescale_bins:
                bins *= lbox/lbox_prev
                bins_av += bins
                n_bin_renewals += 1
            elif bin_tot_box:  # and not rescale_bins
                NUM = int(lbox / STEP)
                remainder = lbox % STEP
                bins = np.linspace(STEP,
                                   lbox-STEP*(1-args.PBC)-remainder,
                                   NUM-1+args.PBC)
                if remainder > 0:
                    bins = np.append(bins, lbox-STEP*(1-args.PBC))
                if bins_av.size < bins.size:
                    bins_av = bins
                n_bin_renewals += 1
        
        dtrajs[i] = np.digitize(coord, bins=bins)
        if args.PBC:
            dtrajs[i][dtrajs[i]==len(bins)] -= len(bins)
    
    # Trajectories must be C contiguous for PyEMMA's timescales_msm and
    # each individual atom/COM needs its individual trajectory.
    dtrajs = np.ascontiguousarray(dtrajs.T)
    
    print(flush=True)
    print("Frames read: {}".format(n_frames), flush=True)
    print("First frame: {:>12d}    Last frame: {:>12d}    "
          "Every Nth frame: {:>12d}"
          .format(u.trajectory[BEGIN].frame, last_frame, EVERY),
          flush=True)
    print("Start time:  {:>12}    End time:   {:>12}    "
          "Every Nth time:  {:>12} (ps)"
          .format(u.trajectory[BEGIN].time,
                  u.trajectory[END-1].time,
                  u.trajectory[0].dt * EVERY),
          flush=True)
    print("Elapsed time:         {}"
          .format(datetime.now()-timer),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
    
    
    
    
    lbox_av /= n_frames
    if rescale_bins and n_bin_renewals > 0:
        bins_av /= n_bin_renewals
    if START == 0:
        bin_width_first = bins_av[0]
    else:
        bin_width_first = bins_av[1] - bins_av[0]
    if np.isclose(STOP, lbox):
        bin_width_last = STOP - bins_av[-1]
    else:
        bin_width_last = bins_av[-1] - bins_av[-2]
    print("\n\n\n", flush=True)
    print("Average/largest bins", flush=True)
    print("  Start:                 {:>12.6f} (A)"
          .format(bins_av[0]-(START==0)*bin_width_first),
          flush=True)
    print("  Stop:                  {:>12.6f} (A)"
          .format(bins_av[-1]+np.isclose(STOP, lbox)*bin_width_last),
          flush=True)
    print("  First bin width:       {:>12.6f} (A)"
          .format(bin_width_first),
          flush=True)
    print("  Last bin width:        {:>12.6f} (A)"
          .format(bin_width_last),
          flush=True)
    print("  Equidistant bins:      {:>5s}"
          .format(str(np.all(np.isclose(np.diff(bins_av), bin_width_last))
                      and np.isclose(bin_width_first, bin_width_last))),
          flush=True)
    print("  Number of bins:        {:>5d}"
          .format(len(bins_av)+1-args.PBC),
          flush=True)
    print("  Rescale bins with box: {:>5s}"
          .format(str(rescale_bins)),
          flush=True)
    print("  Bin entire box length: {:>5s}"
          .format(str(bin_tot_box)),
          flush=True)
    print("  Av. bins = last bins:  {:>5s}"
        .format(str(np.all(np.isclose(bins_av, bins)))),
        flush=True)
    print("  N bin renewals:        {:>5d}"
          .format(n_bin_renewals),
          flush=True)
    #print("  Bins used for last frame:", flush=True)
    #print(bins, flush=True)
    #print("  Average/largest bins:", flush=True)
    #print(bins_av, flush=True)
    
    
    
    
    print("\n\n\n", flush=True)
    print("Discrete trajectory:")
    
    n_frames = dtrajs.shape[-1]
    if n_frames < 2:
        raise ValueError("Trajectories must contain at least two frames"
                         " in order to estimate a Markov model")
    
    if dtrajs.ndim == 1:
        n_trajs = 1
    elif dtrajs.ndim == 2:
        n_trajs = dtrajs.shape[0]
    else:
        raise ValueError("dtrajs has more than two dimensions ({})"
                         .format(dtrajs.ndim))
    
    print("  Number of single particle trajectories: {:>9d}"
          .format(n_trajs), flush=True)
    print("  Number of frames per trajectory:        {:>9d}"
          .format(n_frames), flush=True)
    print("  First populated state:                  {:>9d}"
          .format(np.min(dtrajs)), flush=True)
    print("  Last populated state:                   {:>9d}"
          .format(np.max(dtrajs)), flush=True)
    
    
    
    
    print("\n\n\n", flush=True)
    print("Creating output", flush=True)
    timer = datetime.now()
    
    
    # Discrete trajectories
    mdt.fh.backup(args.OUTFILE+"_traj.npy")
    np.save(args.OUTFILE+"_traj.npy", dtrajs, allow_pickle=False)
    print("  Created " + args.OUTFILE+"_traj.npy", flush=True)
    
    
    # Bin edges
    if not np.isclose(bins_av[-1], lbox_av):
        bins_av = np.append(bins_av, lbox_av)
    mdt.fh.backup(args.OUTFILE+"_bins.npy")
    np.save(args.OUTFILE+"_bins.npy", bins_av, allow_pickle=False)
    print("  Created " + args.OUTFILE+"_bins.npy", flush=True)
    
    
    # Plot of discrete trajectories
    if not args.NOPLOTS:
        bin_widths = np.insert(np.diff(bins_av), 0, bin_width_first)
        bins = bins_av - 0.5 * bin_widths
        
        fig, axis = plt.subplots(figsize=(11.69, 8.27),  # DIN A4 landscape in inches
                                 frameon=False,
                                 clear=True,
                                 tight_layout=True)
        axis.xaxis.set_major_locator(MaxNLocator(integer=True))
        axis.yaxis.set_major_locator(MaxNLocator(integer=True))
        
        offset = 0
        for dtraj in dtrajs:
            mdt.plot.plot(ax=axis,
                          x=np.arange(len(dtraj)) + offset,
                          y=dtraj,
                          xmin=0,
                          xmax=offset+len(dtraj),
                          ymin=-0.5,
                          ymax=len(bins)-0.5,
                          xlabel=r'Time / steps',
                          ylabel=r'State $i$')
            offset += len(dtraj)
        axis.ticklabel_format(axis='x',
                              style='scientific',
                              scilimits=(0,0),
                              useOffset=True)
        
        img, ax2 = mdt.plot.plot_2nd_yaxis(
                       ax=axis,
                       x=np.arange(len(dtraj)) + offset-len(dtraj),
                       y=dtraj,
                       ymin=-0.5,
                       ymax=len(bins)-0.5,
                       ylabel=r'$'+args.DIRECTION+r'$ / A',
                       alpha=0)
        ylim = axis.get_ylim()
        yticks = axis.get_yticks().astype(int)
        yticks = yticks[np.logical_and(yticks>=ylim[0], yticks<=ylim[1])]
        ax2.get_yaxis().set_ticks(yticks)
        yticklabels = np.around(bins[ax2.get_yticks()],
                                decimals=args.DECS)
        if args.DECS == 0:
            yticklabels = yticklabels.astype(int)
        if args.DECS < 0:
            yticklabels = [str(int(l))[:args.DECS] for l in yticklabels]
            ylabel=r'$'+args.DIRECTION+r'$ / $10^{'+str(abs(args.DECS))+r'}$ A'
            ax2.set_ylabel(ylabel=ylabel)
        ax2.set_yticklabels(yticklabels)
        axis.set_xlim(xmin=0, xmax=offset, auto=True)
        
        mdt.fh.backup(args.OUTFILE+"_traj.pdf")
        plt.tight_layout()
        plt.savefig(args.OUTFILE+"_traj.pdf")
        plt.close(fig)
        print("  Created "+args.OUTFILE+"_traj.pdf", flush=True)
    
    
    print("Elapsed time:         {}"
          .format(datetime.now()-timer),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
    
    
    
    
    print("\n\n\n", flush=True)
    print("{} done".format(os.path.basename(sys.argv[0])), flush=True)
    print("Elapsed time:         {}"
          .format(datetime.now()-timer_tot),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
