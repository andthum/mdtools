#!/usr/bin/env python3


# This file is part of MDTools.
# Copyright (C) 2020  Andreas Thum
#
# MDTools is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# MDTools is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with MDTools.  If not, see <http://www.gnu.org/licenses/>.




import sys
import os
from datetime import datetime
import psutil
import argparse
import numpy as np
from scipy import optimize
import mdtools as mdt




def exp_decay(t, k=1):
    """
    Exponential decay fuction:
    
    .. math:
        f(t) = e^{-kt}
    
    Parameters
    ----------
    t : scalar or array_like
        Time(s) at which to evaluate :math:`f(t)`.
    k : scalar
        Rate constant.
    
    Returns
    -------
    decay : scalar or numpy.ndarray
        :math:`f(t)`.
    """
    
    return np.exp(-k * t)




def state_decay_discrete(dtraj1, dtraj2, restart=1,
        negative_invalid=True):
    """
    Take two discretized trajectories as input and calculate the
    propability that a compound, whose discrete states are tracked in
    the first trajectory, is still in the state, in which it was at time
    :math:`t_0`, after a lag time :math:`\tau`. This decay function is
    calculated as function of the states of the second trajectory.
    
    Parameters
    ----------
    dtraj1 : array_like
        The first discretized trajectory. Array of shape ``(m, n)``
        where ``m`` is the number of compounds and ``n`` is the number
        of frames. The elements of `dtraj` must be the indices of the
        states in which a given compound is at a given frame.
    dtraj2 : array_like
        The second discretized trajectory. Must have the same shape as
        `dtraj1`.
    restart : int, optional
        Number of frames between restarting points :math:`t_0`.
    negative_invalid : bool, optional
        If ``True`` (default), negative state indices are treated as
        invalid states. Invalid states are discarded and do not enter
        the calculation.
    
    Returns
    -------
    decay : numpy.ndarray
        Array of shape ``(n,)``. The `i`-th element of `decay` is the
        propability that a compound is still in its initial state after
        `i` frames.
    n_stay : int
        Number of compounds that never leave their state during the
        entire trajectory.
    """
    
    dtraj1 = np.asarray(dtraj1.T, order='C')
    dtraj2 = np.array(dtraj2.T, copy=True, order='C')
    if dtraj1.ndim != 2:
        raise ValueError("dtraj1 must have two dimensions")
    if dtraj1.shape != dtraj2.shape:
        raise ValueError("Both trajectories must have the same shape")
    
    dtraj2 -= np.min(dtraj2)
    n_states = len(np.unique(dtraj2))
    
    n_frames = dtraj1.shape[0]
    n_compounds = dtraj1.shape[1]
    transitions = (np.diff(dtraj1, axis=0) != 0)
    transitions = np.insert(transitions, 0, np.zeros(n_compounds), axis=0)
    n_stay = np.sum(np.all(transitions == 0, axis=0))
    n_trans = np.zeros(n_compounds, dtype=np.uint32)
    decay = np.zeros((n_frames, n_states), dtype=np.float32)
    norm = np.zeros((n_frames, n_states), dtype=np.uint32)
    mask = np.ones(n_compounds, dtype=bool)
    if negative_invalid:
        valid = np.ones(n_compounds, dtype=bool)
    
    proc = psutil.Process(os.getpid())
    timer = datetime.now()
    for t0 in range(0, n_frames-1, restart):
        if t0 % 10**(len(str(t0))-1) == 0 or t0 == n_frames-2:
            print("  Restart {:12d} of {:12d}"
                  .format(t0, n_frames-2),
                  flush=True)
            print("    Elapsed time:             {}"
                  .format(datetime.now()-timer),
                  flush=True)
            print("    Current memory usage: {:18.2f} MiB"
                  .format(proc.memory_info().rss/2**20),
                  flush=True)
            timer = datetime.now()
        
        if negative_invalid:
            np.greater_equal(dtraj1[t0], 0, out=valid)
            bin_ix_u, counts = np.unique(dtraj2[t0][valid],
                                         return_counts=True)
        else:
            bin_ix_u, counts = np.unique(dtraj2[t0], return_counts=True)
        norm[1:n_frames-t0][:,bin_ix_u] += counts.astype(np.uint32)
        for lag in range(1, n_frames-t0):
            np.sum(transitions[t0+1:t0+1+lag], axis=0, out=n_trans)
            for b in bin_ix_u:
                np.equal(dtraj2[t0], b, out=mask)
                if negative_invalid:
                    mask &= valid
                decay[lag][b] += np.count_nonzero(n_trans[mask] == 0)
    
    del dtraj1, dtraj2, transitions, n_trans, mask
    
    if not np.all(norm[0] == 0):
        raise ValueError("The first element of norm is not zero. This"
                         " should not have happened")
    norm[0] = 1
    decay /= norm
    
    if not np.all(decay[0] == 0):
        raise ValueError("The first element of decay is not zero. This"
                         " should not have happened")
    decay[0,:] = 1
    if np.any(decay > 1):
        raise ValueError("At least one element of decay is greater than"
                         " one. This should not have happened")
    if np.any(decay < 0):
        raise ValueError("At least one element of decay is less than"
                         " zero. This should not have happened")
    
    return decay, n_stay








if __name__ == '__main__':
    
    timer_tot = datetime.now()
    proc = psutil.Process(os.getpid())
    
    
    parser = argparse.ArgumentParser(
                 description=(
                     "Read two discretized trajectories, as e.g."
                     " generated by discrete_coord.py or discrete_hex.py."
                     " Calculate the propability that a compound, whose"
                     " discrete states are tracked in the first"
                     " trajectory, is still in the state, in which it"
                     " was at time t0, after a lag time tau. This decay"
                     " function is calculated as function of the states"
                     " of the second trajectory."
                     )
    )
    
    parser.add_argument(
        '--f1',
        dest='TRJFILE1',
        type=str,
        required=True,
        help="File containing the first discretized trajectory stored as"
             " integer numpy.ndarray in .npy format. The array must be"
             " of shape ``(m, n)`` where ``m`` is the number of"
             " compounds and ``n`` is the number of frames. The elements"
             " of the array must be the indices of the states in which a"
             " given compound is at a given frame."
    )
    parser.add_argument(
        '--f2',
        dest='TRJFILE2',
        type=str,
        required=True,
        help="File containing the second discretized trajectory, which"
             " must be of the same shape as the first trajectory."
    )
    parser.add_argument(
        '-o',
        dest='OUTFILE',
        type=str,
        required=True,
        help="Output filename."
    )
    
    parser.add_argument(
        '--restart',
        dest='RESTART',
        type=int,
        default=100,
        help="Number of frames between restarting points for calculating"
             " the decay function. Default: 100"
    )
    parser.add_argument(
        '--neg-inval',
        dest='NEG_INVAL',
        required=False,
        default=False,
        action='store_true',
        help="If set, negative state indices in TRJFILE1 are treated as"
             " invalid states. Invalid states are discarded and do not"
             " enter the calculation."
    )
    
    
    args = parser.parse_args()
    print(mdt.rti.run_time_info_str())
    
    
    
    
    print("\n\n\n", flush=True)
    print("Reading input", flush=True)
    timer = datetime.now()
    
    dtrajs1 = np.load(args.TRJFILE1)
    dtrajs2 = np.load(args.TRJFILE2)
    
    if dtrajs1.shape != dtrajs2.shape:
        raise ValueError("Both trajectories must have the same shape")
    
    states = np.unique(dtrajs2)
    n_states = len(states)
    
    print("Elapsed time:         {}"
          .format(datetime.now()-timer),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
    
    
    
    
    print("\n\n\n", flush=True)
    print("Calculating decay function", flush=True)
    timer = datetime.now()
    
    decay, n_stay = state_decay_discrete(dtraj1=dtrajs1,
                                         dtraj2=dtrajs2,
                                         restart=args.RESTART,
                                         negative_invalid=args.NEG_INVAL)
    lag_times = np.arange(dtrajs1.shape[1], dtype=np.uint32)
    
    print("Elapsed time:         {}"
          .format(datetime.now()-timer),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
    
    
    
    print("\n\n\n", flush=True)
    print("Fitting decay function", flush=True)
    timer = datetime.now()
    
    popt = np.full(n_states, np.nan, dtype=np.float32)
    pcov = np.full(n_states, np.nan, dtype=np.float32)
    for i in range(n_states):
        try:
            popt[i], pcov[i] = optimize.curve_fit(f=exp_decay,
                                                  xdata=lag_times,
                                                  ydata=decay[:,i])
        except (ValueError, RuntimeError, optimize.OptimizeWarning) as err:
            print(flush=True)
            print("An error has occurred during fitting:", flush=True)
            print("{}".format(err), flush=True)
            print("Setting fit parameters to numpy.nan", flush=True)
            print(flush=True)
    
    print("Elapsed time:         {}"
          .format(datetime.now()-timer),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
    
    
    
    
    print("\n\n\n", flush=True)
    print("Creating output", flush=True)
    timer = datetime.now()
    
    header = (
        "Propability that a compound is still in the state, in which\n"
        "it was at time t0, after a lag time tau as function of\n"
        "another set of states."
        "\n"
        "\n"
        "Total number of compounds:                               {:>9d}\n"
        "Number of compounds that never leave their state:        {:>9d}\n"
        "Number of compounds that are always in a negative state: {:>9d}\n"
        "Number of frames per compound:                           {:>9d}\n"
        "Total number of frames with negative states:             {:>9d}\n"
        "\n"
        "\n"
        "The first colum contains the lag times (in trajectory steps).\n"
        "The first row contains the states of the second trajectory\n"
        "used for discretizing the decay function of the first\n"
        "trajectory.\n"
        "\n"
        "Exponential fit of the decay function: f(tau) = exp(-k*tau):\n"
        "k (in 1/step):"
        .format(dtrajs1.shape[0], n_stay, np.sum(np.all(dtrajs1 < 0, axis=1)),
                dtrajs1.shape[1], np.count_nonzero(dtrajs1 < 0),
                1, 2, 3
        )
    )
    
    for i in range(n_states):
        header += " {:>16.9e}".format(popt[i])
    header += ("\n"
               "Std. dev.:    ")
    for i in range(n_states):
        header += " {:>16.9e}".format(np.sqrt(pcov[i]))
    header += "\n"
    
    mdt.fh.savetxt_matrix(fname=args.OUTFILE,
                          data=decay,
                          var1=lag_times,
                          var2=states,
                          header=header)
    
    print("Elapsed time:         {}"
          .format(datetime.now()-timer),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
    
    
    
    
    print("\n\n\n{} done".format(os.path.basename(sys.argv[0])))
    print("Elapsed time:         {}"
          .format(datetime.now()-timer_tot),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
