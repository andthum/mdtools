#!/usr/bin/env python3


# This file is part of MDTools.
# Copyright (C) 2020  Andreas Thum
#
# MDTools is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# MDTools is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with MDTools.  If not, see <http://www.gnu.org/licenses/>.




import sys
import os
from datetime import datetime
import psutil
import argparse
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec
import matplotlib.colors as colors
import matplotlib.cm as cm
from matplotlib.backends.backend_pdf import PdfPages
from matplotlib.ticker import MaxNLocator
import mdtools as mdt


# Matplotlib: Nested Gridspecs
# https://matplotlib.org/3.2.2/gallery/subplots_axes_and_figures/gridspec_nested.html#sphx-glr-gallery-subplots-axes-and-figures-gridspec-nested-py


plt.rc('lines', linewidth=2)
plt.rc('axes', linewidth=2)
plt.rc('xtick.major', width=2)
plt.rc('xtick.minor', width=2)
plt.rc('ytick.major', width=2)
plt.rc('ytick.minor', width=2)
plt.rc('text', usetex=True)
plt.rcParams['text.latex.preview'] = True
plt.rc('font',**{'family' : 'serif', 'serif' : 'Times'})

fontsize_labels = 36
fontsize_ticks = 32
tick_length = 10
label_pad = 16




if __name__ == "__main__":
    
    timer_tot = datetime.now()
    proc = psutil.Process(os.getpid())
    
    
    parser = argparse.ArgumentParser(
                 description=(
                     "Plot the outcome of topological_map.py. Different"
                     " segment types are plotted on separate pages,"
                     " different residue types in separate subplots and"
                     " different atom types in separate subsubplots."
                     " Different residues of the same type are separated"
                     " by dashed lines in the respective subplot. The"
                     " atoms are renumbered to give a continuous"
                     " sequence starting at one. The y labels of the"
                     " plots are read from the column headers of the"
                     " input file. If you want to change the y labels,"
                     " change the column headers (but white space is"
                     " not allowed)"
                 )
    )
    
    parser.add_argument(
        '-f',
        dest='INFILE',
        type=str,
        required=True,
        help="Inputfile (output of topological_map.py)."
    )
    parser.add_argument(
        '-o',
        dest='OUTFILE',
        type=str,
        required=True,
        help="Output filename. Plots are optimized for PDF format with"
             " TeX support."
    )
    
    parser.add_argument(
        '-b',
        dest='BEGIN',
        type=int,
        required=False,
        default=0,
        help="First frame to read. Frame numbering starts at zero."
             " Default: 0"
    )
    parser.add_argument(
        "-e",
        dest="END",
        type=int,
        required=False,
        default=-1,
        help="Last frame to read (exclusive, i.e. the last frame read is"
             " actually END-1). Default: -1 (means read the very last"
             " frame of the trajectory)"
    )
    parser.add_argument(
        '--every',
        dest='EVERY',
        type=int,
        required=False,
        default=1,
        help="Read every n-th frame. Default: 1"
    )
    
    parser.add_argument(
        '--ns',
        dest='NS',
        required=False,
        default=False,
        action='store_true',
        help="Convert time from ps to ns."
    )
    parser.add_argument(
        '--nm',
        dest='NM',
        required=False,
        default=False,
        action='store_true',
        help="Convert length from A to nm. Meaningless if -d is not"
             " given."
    )
    parser.add_argument(
        '--n-xticks',
        dest='NXTICKS',
        type=int,
        default=None,
        help="Maximum number of x tick intervalls to use for the plot."
    )
    parser.add_argument(
        '--ylabel',
        dest='YLABEL',
        type=str,
        default="Coordinating",
        help="ylabel prefix. The ylabel is constructed from this prefix"
             " and the corresponding column header from the input file."
             " Default prefix: 'Coordinating'"
    )
    
    parser.add_argument(
        '-d',
        dest='DIRECTION',
        type=str,
        default=None,
        help="The data points in the plot can be colored according to"
             " x, y or z coordinate of the reference position."
             " Default: No coloring."
    )
    
    
    args = parser.parse_args()
    print(mdt.rti.run_time_info_str())
    
    
    if (args.DIRECTION is not None and
        args.DIRECTION != 'x' and
        args.DIRECTION != 'y' and
        args.DIRECTION != 'z'):
        raise ValueError("-d must be either 'x', 'y' or 'z', but you"
                         " gave {}".format(args.DIRECTION))
    pos_col = {'x': 1, 'y': 2, 'z': 3}
    
    
    
    
    print("\n\n\n", flush=True)
    print("Reading input", flush=True)
    timer = datetime.now()
    
    
    with open(args.INFILE, 'r') as f:
        headers = None
        for line in f:
            if line[0] != '#':
                break
            else:
                headers = line[1:]
    
    if headers is None:
        raise ValueError("Could not read headers")
    if len(headers) <= 4:
        raise ValueError("headers does not contain segment, residue or"
                         " atom type names")
    
    headers = headers.split()
    headers = np.array(headers[4:], dtype=str)
    ix_cols = np.arange(4, len(headers)+4)
    
    
    times = np.genfromtxt(fname=args.INFILE, usecols=0, dtype=np.float32)
    if len(times) <= 1:
        raise ValueError("The input file must contain at least two"
                         " frames")
    BEGIN, END, EVERY, n_frames = mdt.check.frame_slicing(
                                      start=args.BEGIN,
                                      stop=args.END,
                                      step=args.EVERY,
                                      n_frames_tot=len(times))
    times = times[BEGIN:END:EVERY]
    if args.NS:
        times /= 1000  # /1000 to convert ps to ns
        time_unit = "ns"
    else:
        time_unit = "ps"
    
    
    ix = np.genfromtxt(fname=args.INFILE, usecols=ix_cols, dtype=str)
    ix = ix[BEGIN:END:EVERY]
    seg_cols = np.any(np.char.isalpha(ix), axis=0)
    #atm_cols = np.all(np.char.isnumeric(ix), axis=0)  # not needed
    #res_cols = np.equal(seg_cols, atm_cols)           # not needed
    
    
    if args.DIRECTION is None:
        pos = None
        pos_min = None
        pos_max = None
        norm = None
        cmap = None
    else:
        pos = np.genfromtxt(fname=args.INFILE,
                            usecols=pos_col[args.DIRECTION],
                            dtype=np.float32)
        pos = pos[BEGIN:END:EVERY]
        if args.NM:
            pos /= 10  # /10 to convert A to nm
            pos_unit = "nm"
        else:
            pos_unit = "A"
        pos_min = np.min(pos)
        pos_max = np.max(pos)
        norm = colors.Normalize(vmin=pos_min, vmax=pos_max)
        cmap = 'gnuplot'  # For directions with periodic boundary
                          # conditions, a cyclic colormap might be more
                          # suitable
    
    
    print("Elapsed time:         {}"
          .format(datetime.now()-timer),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
    
    
    
    
    print("\n\n\n", flush=True)
    print("Creating plot", flush=True)
    timer = datetime.now()
    
    #mdt.fh.backup(args.OUTFILE)  TODO uncomment
    with PdfPages(args.OUTFILE) as pdf:
        seg_blocks = np.append(np.nonzero(seg_cols)[0], len(seg_cols))
        for sb in range(len(seg_blocks)-1):
            sb_headers = headers[seg_blocks[sb]:seg_blocks[sb+1]]
            print(flush=True)
            print("  Segment: {:>12s}"
                  .format(sb_headers[0]),
                  flush=True)
            sb_ix = ix[:,seg_blocks[sb]:seg_blocks[sb+1]]
            #sb_seg_ix = np.array([mdt.nph.excel_colnum(i)  # not needed
                                  #for i in sb_ix[:,0]],
                                 #dtype=np.float16)
            sb_seg_cols = seg_cols[seg_blocks[sb]:seg_blocks[sb+1]]
            sb_atm_cols = np.all(np.char.isnumeric(sb_ix), axis=0)
            sb_res_cols = np.equal(sb_seg_cols, sb_atm_cols)
            res_blocks = np.append(np.nonzero(sb_res_cols)[0],
                                   len(sb_res_cols))
            res_blocks_same = mdt.nph.ix_of_item_change_1d(sb_headers[sb_res_cols])
            res_blocks_same = res_blocks_same[1:] - 1
            if len(res_blocks_same) == 0 and len(res_blocks) > 2:
                res_blocks = res_blocks[[0, -1]]
            else:
                res_blocks = np.delete(res_blocks, res_blocks_same)
            
            if pos is None:
                nrows = len(res_blocks) - 1
                grid_heights = np.ones(nrows)
            else:
                nrows = len(res_blocks)
                grid_heights = np.ones(nrows)
                grid_heights[0] = 0.1
            fig = plt.figure(figsize=(11.69, 8.27*(len(res_blocks)-1)),
                             frameon=False,
                             clear=True)
            grid_outer = gridspec.GridSpec(nrows=nrows,
                                           ncols=1,
                                           figure=fig,
                                           height_ratios=grid_heights)
            
            for rb in range(len(res_blocks)-1):
                rb_headers = sb_headers[res_blocks[rb]:res_blocks[rb+1]]
                print("    Residue: {:>10s}"
                      .format(rb_headers[0]),
                      flush=True)
                rb_ix = sb_ix[:,res_blocks[rb]:res_blocks[rb+1]].astype(np.float32)
                rb_res_ix = -rb_ix[:,sb_res_cols[res_blocks[rb]:res_blocks[rb+1]]]
                rb_res_ix_sorted = np.unique(rb_res_ix[rb_res_ix>0])
                rb_atm_cols = np.all(rb_ix >= 0, axis=0)
                atm_types = np.unique(rb_headers[rb_atm_cols])
                atm_blocks = np.zeros((len(atm_types), len(rb_headers)),
                                      dtype=bool)
                for i, at in enumerate(atm_types):
                    atm_blocks[i][rb_headers==at] = True
                
                if pos is None:
                    grid_cell = rb
                else:
                    grid_cell = rb + 1
                grid_inner = gridspec.GridSpecFromSubplotSpec(
                                 nrows=len(atm_types),
                                 ncols=1,
                                 subplot_spec=grid_outer[grid_cell],
                                 hspace=0)
                axis_prev = None
                
                for i, ab in enumerate(atm_blocks):
                    ab_headers = rb_headers[ab]
                    print("      Atom type: {:>6s}"
                          .format(ab_headers[0]),
                          flush=True)
                    ab_ix = rb_ix[:,ab]
                    ab_ix_valid = ab_ix > 0
                    ab_ix_min = np.min(ab_ix[ab_ix_valid])
                    ab_ix[ab_ix_valid] -= ab_ix_min - 1
                    ab_ix_sorted = np.unique(ab_ix[ab_ix_valid])
                    ab_ix_sorted_diff = np.diff(ab_ix_sorted)
                    ab_ix_sorted_diff_big = np.nonzero(ab_ix_sorted_diff>1)[0]
                    for d in ab_ix_sorted_diff_big:
                        ab_ix[ab_ix>=ab_ix_sorted[d+1]] -= ab_ix_sorted_diff[d]-1
                        ab_ix_sorted[d+1:] -= ab_ix_sorted_diff[d] - 1
                    ab_ix_in_r_min = np.zeros(len(rb_res_ix_sorted),
                                              dtype=np.uint32)
                    for j, r in enumerate(rb_res_ix_sorted):
                        r_mask = np.equal(rb_res_ix, r)
                        r_mask = np.repeat(
                                     r_mask,
                                     len(ab_ix[0])//len(rb_res_ix[0]),
                                     axis=1)
                        ab_ix_in_r = np.unique(ab_ix[r_mask])
                        if not np.all(ab_ix_in_r == 0):
                            ab_ix_in_r_min[j] = ab_ix_in_r[ab_ix_in_r>0][0]
                    ab_ix_in_r_min = np.unique(ab_ix_in_r_min[ab_ix_in_r_min>0])
                    ab_ix_max = np.max(ab_ix)
                    ab_ix[np.logical_not(ab_ix_valid)] = np.nan
                    
                    axis = fig.add_subplot(grid_inner[i,0],
                                           sharex=axis_prev)
                    axis.xaxis.set_major_locator(MaxNLocator(integer=True))
                    axis.yaxis.set_major_locator(MaxNLocator(integer=True))
                    if args.NXTICKS is not None:
                        axis.locator_params(nbins=args.NXTICKS, axis='x')
                    axis.hlines(y=ab_ix_in_r_min-0.5,
                                xmin=times[0],
                                xmax=times[-1],
                                linestyles='--')
                    
                    for a_ix in ab_ix.T:
                        mdt.plot.scatter(
                            ax=axis,
                            x=times,
                            y=a_ix,
                            c=pos,
                            xmin=times[0],
                            xmax=times[-1],
                            ymin=0.5,
                            ymax=ab_ix_max+0.5 if ab_ix_max>1 else ab_ix_max+1.5,
                            xlabel=r'Time / {}'.format(time_unit),
                            ylabel=r'{} {}'.format(args.YLABEL,
                                                   ab_headers[0]),
                            marker='.',
                            color='black' if pos is None else None,
                            cmap=cmap,
                            vmin=pos_min,
                            vmax=pos_max,
                            norm=norm)
                    if rb < len(res_blocks)-2:
                        axis.tick_params(labelbottom=False)
                        axis.set_xlabel('')
                    elif i < len(atm_types)-1:
                        axis.tick_params(labelbottom=False)
                        axis.set_xlabel('')
                    else:
                        axis.ticklabel_format(axis='x',
                                              style='scientific',
                                              scilimits=(0,0),
                                              useOffset=False)
                    axis_prev = axis
            
            if pos is not None:
                axis = fig.add_subplot(grid_outer[0,0], sharex=axis_prev)
                axis.axis('off')
                cbar = fig.colorbar(cm.ScalarMappable(norm=norm,
                                                      cmap=cmap),
                                    ax=axis,
                                    orientation='horizontal',
                                    fraction=1,
                                    spacing='proportional')
                cbar.set_label(label=r'${}$ / {}'.format(args.DIRECTION,
                                                         pos_unit),
                               fontsize=fontsize_labels)
                cbar.ax.xaxis.labelpad = label_pad
                cbar.ax.xaxis.offsetText.set(size=fontsize_ticks)
                cbar.ax.xaxis.set_ticks_position('top')
                cbar.ax.xaxis.set_label_position('top')
                cbar.ax.tick_params(which='major',
                                    direction='out',
                                    length=tick_length,
                                    labelsize=fontsize_ticks)
                cbar.ax.tick_params(which='minor',
                                    direction='out',
                                    length=0.5*tick_length,
                                    labelsize=0.8*fontsize_ticks)
            
            grid_outer.tight_layout(fig)
            pdf.savefig()
            plt.close()
    
    print(flush=True)
    print("  Created {}".format(args.OUTFILE))
    print(flush=True)
    print("Elapsed time:         {}"
          .format(datetime.now()-timer),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
    
    
    
    
    print("\n\n\n{} done".format(os.path.basename(sys.argv[0])))
    print("Elapsed time:         {}"
          .format(datetime.now()-timer_tot),
          flush=True)
    print("Current memory usage: {:.2f} MiB"
          .format(proc.memory_info().rss/2**20),
          flush=True)
