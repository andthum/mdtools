# This file is part of MDTools.
# Copyright (C) 2021, The MDTools Development Team and all contributors
# listed in the file AUTHORS.rst
#
# MDTools is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# MDTools is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with MDTools.  If not, see <http://www.gnu.org/licenses/>.


"""Functions to calculate structural properties."""


# Standard libraries
import os
import warnings
from datetime import datetime
# Third party libraries
import psutil
import numpy as np
from scipy import sparse
import MDAnalysis as mda
import MDAnalysis.lib.distances as mdadist
# Local application/library specific imports
import mdtools as mdt


def com(ag, pbc=False, compound='group', make_whole=False, debug=False):
    """
    Calculate the center of mass of (compounds of) a MDAnalysis
    :class:`~MDAnalysis.core.groups.AtomGroup`.
    
    Parameters
    ----------
    ag : MDAnalysis.core.groups.AtomGroup instance
        The MDAnalysis :class:`~MDAnalysis.core.groups.AtomGroup` for
        which to calculate the center of mass.
    pbc : bool, optional
        If ``True`` and `compound` is ``'group'``, move all atoms to the
        primary unit cell *before* calculating the center of mass.  If
        ``True`` and `compound` is ``'segments'``, ``'residues'``,
        ``'molecules'``, or ``'fragments'``, the center of mass of each
        compound will be calculated without moving any atoms to keep the
        compounds intact (if they were intact before).  Instead, the
        resulting position vectors will be moved to the primary unit
        cell *after* calculating the center of mass.
    compound : {'group', 'segments', 'residues', 'molecules', 'fragments'}, optional
        The compounds of `ag` for which to calculate the center of mass.
        If 'group', the center of mass of all atoms in the group will be
        returned as a single position vector.  Else, the centers of mass
        of each :class:`~MDAnalysis.core.groups.Segment`,
        :class:`~MDAnalysis.core.groups.Residue`, molecule, or
        :attr:`fragment <MDAnalysis.core.groups.AtomGroup.fragments>`
        contained in `ag` will be returned as an array of position
        vectors, i.e. a 2d array.  Note that in any case, even if e.g.
        `compound` is ``'residues'``, only the positions of
        :class:`atoms <MDAnalysis.core.groups.Atom>` belonging to `ag`
        are taken into account.
    make_whole : bool, optional
        If ``True``, first all atoms of `ag` are wrapped back into the
        primary unit cell, to make sure that the algorithm is working
        properly.  Then compounds whose bonds are broken across the box
        edges are made whole again.  This means that making molecules
        whole in an unwrapped trajectory is not possible with this
        function, because in a first step all atoms are wrapped back
        into the primary unit cell.
    debug : bool, optional
        If ``True``, run in debug mode.
    
    Returns
    -------
    center : numpy.ndarray
        Position vector(s) of the weighted center(s) of mass of `ag`.
        If `compound` was set to ``'group'``, the output will be a
        single position vector.  If compound was set to ``'segments'``,
        ``'residues'``, ``'molecules'`` or ``'fragments'``, the output
        will be a 2d array of shape ``(n, 3)`` where ``n`` is the number
        of compounds in `ag`.
    
    See Also
    --------
    :meth:`MDAnalysis.core.groups.AtomGroup.center` :
        Weighted center of (compounds of) the group
    
    Notes
    -----
    This function uses the
    :meth:`~MDAnalysis.core.groups.AtomGroup.center` method of the input
    :class:`~MDAnalysis.core.groups.AtomGroup` to calculate the center
    of mass.
    
    If `make_whole` is ``True``, the atoms are wrapped back into the
    primary unit cell using :func:`mdtools.box.wrap` before calling
    :meth:`~MDAnalysis.core.groups.AtomGroup.center` with the option
    `unwrap` set to ``True``.  This is done to make sure that the unwrap
    algorithm of :meth:`~MDAnalysis.core.groups.AtomGroup.center` is
    working properly.
    """
    mdt.check.masses_new(ag=ag, verbose=debug)
    if make_whole:
        mdt.box.wrap(ag=ag, debug=debug)
    return ag.center(weights=ag.masses,
                     pbc=pbc,
                     compound=compound,
                     unwrap=make_whole)


def contact_matrix(
        ref, sel, cutoff, compound='atoms', min_contacts=1,
        fill_missing_compound_ix=False, box=None, result=None,
        mdabackend='serial', debug=False):
    """
    Construct a contact matrix for two MDAnalysis
    :class:`AtomGroups <MDAnalysis.core.groups.AtomGroup>`.
    
    Construct a boolean matrix whose elements indicate whether a contact
    exists between a given reference and selection compound or not.  The
    matrix element ``cm[i][j]`` will be ``True``, if compound ``j`` of
    the selection group has at least `min_contacts` contacts to compound
    ``i`` of the reference group.
    
    Parameters
    ----------
    ref : MDAnalysis.core.groups.AtomGroup instance
        The reference :class:`~MDAnalysis.core.groups.AtomGroup`.  Must
        be unique, i.e. must not contain dublicate
        :class:`atoms <MDAnalysis.core.groups.Atom>`.
    sel : MDAnalysis.core.groups.AtomGroup instance
        The selection :class:`~MDAnalysis.core.groups.AtomGroup`.  Must
        be unique, too.
    cutoff : scalar
        A reference and selection atom are considered to be in contact,
        if their distance is less than or equal to this cutoff.
    compound : {'atoms', 'segments', 'residues', 'fragments'}, optional
        The compounds of `ref` and `sel` for which to calculate the
        contact matrix.  If 'atoms', contacts between the individual
        :class:`atoms <MDAnalysis.core.groups.Atom>` will be computed.
        Else, contacts between
        :class:`segments <MDAnalysis.core.groups.Segment>`,
        :class:`residues <MDAnalysis.core.groups.Residue>`,
        or :attr:`~MDAnalysis.core.groups.AtomGroup.fragments`
        will be computed.  Note that in any case, even if e.g. `compound`
        is ``'residues'``, only the positions of
        :class:`atoms <MDAnalysis.core.groups.Atom>` belonging to `ref`
        and `sel` are taken into account.
    min_contacts : int, optional
        Compounds of the two input
        :class:`AtomGroups <MDAnalysis.core.groups.AtomGroup>` are only
        considered to be in contact, if the compounds are connected with
        each other via at least this many
        :class:`atoms <MDAnalysis.core.groups.Atom>`.  `min_contacts` is
        ignored if `compound` is ``'atoms'``.
    fill_missing_compound_ix : bool, optional
        If ``True``, also create matrix elements for missing
        intermediate compound indices.  These matrix elements will
        evaluate to ``False``.  Only relevant, if the compounds of the
        reference and/or selection
        :class:`~MDAnalysis.core.groups.AtomGroup` do not form a
        contiguous set of indices.
    box : array_like, option
        The unit cell dimensions of the system, which can be orthogonal
        or triclinic and must be provided in the same format as returned
        by :attr:`MDAnalysis.coordinates.base.Timestep.dimensions`:
        ``[lx, ly, lz, alpha, beta, gamma]``.  If provided, the minimum
        image convention will be taken into account.
    result : numpy.ndarray, optional
        Preallocated result array for
        :func:`MDAnalysis.lib.distances.distance_array` which must have
        the shape ``(ref.n_atoms, sel.n_atoms)`` and dtype
        ``numpy.float64``.  Avoids creating the array which saves time
        when the function is called repeatedly.
    mdabackend : {'serial', 'OpenMP'}, optional
        Keyword selecting the type of acceleration for
        :func:`MDAnalysis.lib.distances.distance_array`.  See there for
        further information.
    debug : bool, optional
        If ``True``, run in debug mode.
    
    Returns
    -------
    cm : numpy.ndarray
        Contact matrix as :class:`numpy.ndarray` of dtype ``bool``.
        Matrix elements evaluating to ``True`` indicate a contact
        between the respective compounds of the reference and selection
        group.
    """
    if cutoff <= 0:
        warnings.warn("'cutoff' ({}) is equal to or less than zero"
                      .format(cutoff), RuntimeWarning)
    if min_contacts < 1 and compound != 'atoms':
        warnings.warn("'min_contacts' ({}) is less than one."
                      " Everything will be regarded as contact"
                      .format(min_contacts), RuntimeWarning)
    if debug:
        if ref.n_atoms == 0:
            raise ValueError("The reference group contains no atoms")
        if sel.n_atoms == 0:
            raise ValueError("The selection group contains no atoms")
        if ref.unique != ref:
            raise ValueError("The reference group must not contain"
                             " dublicate atoms")
        if sel.unique != sel:
            raise ValueError("The selection group must not contain"
                             " dublicate atoms")
        if compound == 'atoms':
            natms_per_ref_compound = 1
            natms_per_sel_compound = 1
        elif compound == 'segments':
            _, natms_per_ref_compound = np.unique(ref.segindices,
                                                  return_counts=True)
            _, natms_per_sel_compound = np.unique(sel.segindices,
                                                  return_counts=True)
        elif compound == 'residues':
            _, natms_per_ref_compound = np.unique(ref.resindices,
                                                  return_counts=True)
            _, natms_per_sel_compound = np.unique(sel.resindices,
                                                  return_counts=True)
        elif compound == 'fragments':
            _, natms_per_ref_compound = np.unique(ref.fragindices,
                                                  return_counts=True)
            _, natms_per_sel_compound = np.unique(sel.fragindices,
                                                  return_counts=True)
        else:
            raise ValueError("compound must be either 'atoms',"
                             " 'segments', 'residues' or 'fragments',"
                             " but you gave '{}'".format(compound))
        max_contacts = (np.max(natms_per_ref_compound) *
                        np.max(natms_per_sel_compound))
        if min_contacts > max_contacts and compound != 'atoms':
            warnings.warn("min_contacts ({}) is greater than the"
                          " maximal possible number of contacts ({})"
                          .format(min_contacts, max_contacts),
                          RuntimeWarning)
        mdt.check.box(box=box, with_angles=True, dim=1)
        mdt.check.array(result,
                        shape=(ref.n_atoms, sel.n_atoms),
                        dtype=np.float64)
    
    dists = mdadist.distance_array(reference=ref.positions,
                                   configuration=sel.positions,
                                   box=box,
                                   result=result,
                                   backend=mdabackend)
    cm = (dists <= cutoff)
    
    if compound == 'atoms':
        refix = ref.indices
        selix = sel.indices
    else:
        if compound == 'segments':
            refix, natms_per_ref_compound = np.unique(ref.segindices,
                                                      return_counts=True)
            selix, natms_per_sel_compound = np.unique(sel.segindices,
                                                      return_counts=True)
        elif compound == 'residues':
            refix, natms_per_ref_compound = np.unique(ref.resindices,
                                                      return_counts=True)
            selix, natms_per_sel_compound = np.unique(sel.resindices,
                                                      return_counts=True)
        elif compound == 'fragments':
            refix, natms_per_ref_compound = np.unique(ref.fragindices,
                                                      return_counts=True)
            selix, natms_per_sel_compound = np.unique(sel.fragindices,
                                                      return_counts=True)
        else:
            raise ValueError("compound must be either 'atoms',"
                             " 'segments', 'residues' or 'fragments',"
                             " but you gave '{}'".format(compound))
        
        rblock = np.cumsum(np.insert(natms_per_ref_compound[:-1], 0, 0),
                           dtype=np.uint32)
        sblock = np.cumsum(np.insert(natms_per_sel_compound[:-1], 0, 0),
                           dtype=np.uint32)
        cm_row_sum = np.add.reduceat(cm, rblock, axis=0, dtype=np.uint32)  # row block sum
        cm = np.add.reduceat(cm_row_sum, sblock, axis=1, dtype=np.uint32)  # col block sum
        cm = (cm >= min_contacts)
    
    if cm.shape != (len(refix), len(selix)):
        raise ValueError("cm has shape {}, but must have shape {}. This"
                         " should not have happened"
                         .format(cm.shape, (len(refix), len(selix))))
    
    if fill_missing_compound_ix:
        refix -= np.min(refix)
        if refix[-1]+1 != len(refix):
            row_insert = np.zeros(cm.shape(1), dtype=bool)
            refix_miss = np.setdiff1d(np.arange(refix[-1]+1),
                                      refix,
                                      assume_unique=True)
            for missing_refix in refix_miss:
                cm = np.insert(cm, missing_refix, row_insert)
        selix -= np.min(selix)
        if selix[-1]+1 != len(selix):
            col_insert = np.zeros(cm.shape(0), dtype=bool)
            selix_miss = np.setdiff1d(np.arange(selix[-1]+1),
                                      selix,
                                      assume_unique=True)
            for missing_selix in selix_miss:
                cm = np.insert(cm, missing_selix, col_insert)
        if cm.shape != (refix[-1]+1, selix[-1]+1):
            raise ValueError("cm has shape {}, but must have shape {}."
                             " This should not have happened"
                             .format(cm.shape,
                                     (refix[-1]+1, selix[-1]+1)))
    
    return cm




def contact_matrices(topfile, trjfile, ref, sel, cutoff,
        compound='atoms', min_contacts=1, begin=0, end=-1, every=1,
        verbose=False, debug=False):
    """
    Read a trajectory and calculate for each frame the contact matrix
    for contacts between reference and selection compounds.
    
    Parameters
    ----------
    topfile : str
        Topology file. See supported topology formats of MDAnalysis.
    trjfile : str
        Trajectory file. See supported coordinate formats of MDAnalysis.
    ref, sel : str
        Selection string for selecting the reference/selection
        :class:`~MDAnalysis.core.groups.AtomGroup`. See MDAnalysis
        selection commands for possible choices.
    cutoff : scalar
        A reference and selection atom are considered to be in contact,
        if their distance is less than or equal to this cutoff.
    compound : str, optional
        Must be either ``'atoms'``, ``'segments'``, ``'residues'``, or
        ``'fragments'``. If 'atoms', contacts between the individual
        atoms will be computed. Else, contacts between
        :class:`~MDAnalysis.core.groups.Segment`s,
        :class:`~MDAnalysis.core.groups.Residue`s,
        or fragments will be computed.
    min_contacts : int, optional
        Compounds of the two :class:`~MDAnalysis.core.groups.AtomGroup`s
        are only considered to be in contact, if there are at least
        `min_contacts` contacts between the atoms of the compounds.
        `min_contacts` is ignored if ``compound=='atoms'``.
    begin : int, optional
        First frame to read. Frame numbering starts at zero.
    end : int, optional
        Last frame to read (exclusive, i.e. the last frame read is
        actually ``end-1``). A negative value results in reading until
        the end of the trajectory.
    every : int, optional
        Read every n-th frame.
    verbose : bool, optional
        If ``True``, print progress information to standard output.
    debug : bool, optional
        If ``True``, check the input arguments.
    
    Returns
    -------
    cms : list
        List of contact matrices, one for each frame. The contact
        matrices are stored as :class:`scipy.sparse.csr_matrix`. Each
        contact matrix has as many rows as reference compounds and as
        many columns as selection compounds.
    """
    
    if verbose:
        proc = psutil.Process(os.getpid())
        timer = datetime.now()
    
    u = mda.Universe(topfile, trjfile)
    ref = u.select_atoms(' '.join(ref))
    sel = u.select_atoms(' '.join(sel))
    
    begin, end, every, n_frames = mdt.check.frame_slicing(
                                      start=begin,
                                      stop=end,
                                      step=every,
                                      n_frames_tot=u.trajectory.n_frames)
    
    cms = [None,] * n_frames
    tmp_dist_array = np.full((ref.n_atoms, sel.n_atoms),
                             np.nan,
                             dtype=np.float64)
    
    for i, ts in enumerate(u.trajectory[begin:end:every]):
        if (verbose and
            ts.frame % 10**(len(str(ts.frame))-1) == 0 or
            ts.frame == begin or
            ts.frame == end-1):
            print("  Frame   {:12d}".format(ts.frame), flush=True)
            print("    Step: {:>12}    Time: {:>12} (ps)"
                  .format(ts.data['step'], ts.data['time']),
                  flush=True)
            print("    Elapsed time:             {}"
                  .format(datetime.now()-timer),
                  flush=True)
            print("    Current memory usage: {:18.2f} MiB"
                  .format(proc.memory_info().rss/2**20),
                  flush=True)
            timer = datetime.now()
        
        if debug:
            mdt.check.box(box=ts.dimensions, with_angles=True, dim=1)
            mdt.check.pos_array(pos_array=ref.positions,
                                  shape=(ref.n_atoms, 3))
            mdt.check.pos_array(pos_array=sel.positions,
                                  shape=(sel.n_atoms, 3))
        
        tmp_cm = mdt.strc.contact_matrix(ref=ref,
                                         sel=sel,
                                         cutoff=cutoff,
                                         compound=compound,
                                         min_contacts=min_contacts,
                                         box=ts.dimensions,
                                         result=tmp_dist_array,
                                         debug=debug)
        cms[i] = sparse.csr_matrix(tmp_cm, dtype=bool)
    
    return cms
