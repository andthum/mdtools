# This file is part of MDTools.
# Copyright (C) 2021, The MDTools Development Team and all contributors
# listed in the file AUTHORS.rst
#
# MDTools is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.
#
# MDTools is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with MDTools.  If not, see <http://www.gnu.org/licenses/>.




# Functions that deal with the simulation box

import os
from datetime import datetime
import psutil
import numpy as np
import MDAnalysis as mda
import MDAnalysis.lib.mdamath as mdamath
import mdtools as mdt




def box_volume(box, debug=False):
    """
    Calculate the volume of a triclinic box using
    :func:`~MDAnalysis.lib.mdamath.box_volume`
    
    Parameters
    ----------
    box : array_like
        Box dimensions provided in the same format as returned by
        :attr:`MDAnalysis.coordinates.base.Timestep.dimensions`:
        ``[lx, ly, lz, alpha, beta, gamma]``.
    debug : bool, optional
        If ``True``, check the input arguments. Default: ``False``
    
    Returns
    -------
    volume : scalar
        The volume of the box.
    """
    
    if debug:
        mdt.check.box(box=box, with_angles=True, dim=1)
    
    volume = mdamath.box_volume(box)
    if not volume:
        mdt.check.box(box=box, with_angles=True, dim=1)
        raise ValueError("The box volume is zero")
    
    return volume




def volume(box, dtype=None, debug=False):
    """
    Calculate the volume of an orthorhombic box.
    
    Parameters
    ----------
    box : array_like
        The box to calculate the volume for. Must be orthorhombic and
        provided as ``[lx, ly, lz]`` or as an array of ``[lx, ly, lz]``.
    dtype : type, optional
        The data type of the output array. If `dtype` is not given
        (default), infer the data type from the other input arguments.
    debug : bool, optional
        If ``True``, check the input arguments. Default: ``False``
    
    Returns
    -------
    volume : float or numpy.ndarray
        The volume of the box. If `box` was provided as an array of
        ``[lx, ly, lz]`` boxes, `volume` will be an array containing the
        volume for each box.
    """
    
    if debug:
        mdt.check.box(box=box, orthorhombic=True)
    
    return np.prod(box, axis=len(box.shape)-1, dtype=dtype)




def diagonal(box, dtype=None, debug=False):
    """
    Calculate the length of the diagonal of an orthorhombic box.
    
    Parameters
    ----------
    box : array_like
        The box to calculate the diagonal for. Must be orthorhombic and
        provided as ``[lx, ly, lz]`` or as an array of ``[lx, ly, lz]``.
    dtype : type, optional
        The data type of the output array. If `dtype` is not given
        (default), infer the data type from the other input arguments.
    debug : bool, optional
        If ``True``, check the input arguments. Default: ``False``
    
    Returns
    -------
    diagonal : float or numpy.ndarray
        The length of the diagonal of the box. If `box` was provided as
        an array of ``[lx, ly, lz]`` boxes, `diagonal` will be an array
        containing the length of the diagonal for each box.
    """
    
    if debug:
        mdt.check.box(box=box, orthorhombic=True)
    
    return np.sqrt(np.sum(np.square(box, dtype=dtype),
                          axis=len(box.shape)-1))




def wrap(atm_grp, box=None, compound='atoms', center='com', inplace=True,
        debug=False):
    """
    Shift the atoms of a MDAnalysis
    :class:`~MDAnalysis.core.groups.AtomGroup` back into the primary
    unit cell by using the :func:`~MDAnalysis.core.groups.AtomGroup.wrap`
    method of the :class:`~MDAnalysis.core.groups.AtomGroup`. Other
    possible MDAnalysis functions for wrapping atoms into the primary
    unit cell are :func:`~MDAnalysis.core.groups.AtomGroup.pack_into_box`
    and :func:`~MDAnalysis.lib.distances.apply_PBC`.
    
    Note
    ----
    Changing atom positions is not reflected in any file; reading any
    frame from the :attr:`~MDAnalysis.core.universe.Universe.trajectory`
    will replace the change with that from the file except if the
    :attr:`~MDAnalysis.core.universe.Universe.trajectory` is held in
    memory, e.g., when the
    :method:`~MDAnalysis.core.universe.Universe.transfer_to_memory`
    method was used.
    
    Parameters
    ----------
    atm_grp : MDAnalysis.core.groups.AtomGroup instance
        The MDAnalysis :class:`~MDAnalysis.core.groups.AtomGroup` whose
        atoms shall be wrapped back into the primary unit cell. Note
        that in any case, even with e.g. ``compound='residues'``, only
        the positions of atoms belonging to `atm_grp` will be taken into
        account.
    box : array_like, optional
        The unit cell dimensions of the system, which can be orthogonal
        or triclinic and must be provided in the same format as returned
        by :attr:`MDAnalysis.coordinates.base.Timestep.dimensions`:
        ``[lx, ly, lz, alpha, beta, gamma]``. If ``None``, the
        dimensions of the current time step will be used.
    compound : str, optional
        Which type of component to keep together during wrapping. Must
        be either ``'atoms'``, ``'group'``, ``'segments'``,
        ``'residues'``, ``'molecules'`` or ``'fragments'``. Atoms
        belonging to the compound are shifted by the same translation
        vector so that their `center` lies within the box. However, this
        means that not necessarily all atoms of the compound lie within
        the box. Default is ``'atoms'``, which means that each atom of
        `atm_grp` is shifted by its individual translation vector so
        that at the end all atoms of `atm_grp` will lie inside the box.
    center : str, optional
        How to define the center of a given group of atoms. Must be
        either ``'com'`` for center of mass or ``'cog'`` for center of
        geometry. If compound is ``'atoms'``, this parameter is
        meaningless and therefore ignored.
    inplace : bool, optional
        If ``True``, coordinates will be changed in place.
    debug : bool, optional
        If ``True``, check the input arguments. Default: ``False``
    
    Returns
    -------
    coords : numpy.ndarray
        Numpy array of wrapped atom coordinates of dtype `numpy.float32`
        and shape ``(atm_grp.n_atoms, 3)``.
    """
    
    if debug:
        if box is not None:
            mdt.check.box(box=box, with_angles=True, dim=1)
        if (compound != 'atoms' and
            compound != 'group' and
            compound != 'segments' and
            compound != 'residues' and
            compound != 'molecules' and
            compound != 'fragments'):
            raise ValueError("compound must be either 'atoms', 'group',"
                             " 'segments', 'residues', 'molecules' or"
                             " 'fragments', but you gave '{}'"
                             .format(compound))
        if center != 'com' and center != 'cog':
            raise ValueError("center must be either 'com' or 'cog', but"
                             " you gave {}".format(center))
        if atm_grp.n_atoms>1 and center=='com' and compound != 'atoms':
            mdt.check.masses(ag=atm_grp, flash_test=False)
    
    if atm_grp.n_atoms > 1:
        if center == 'com' and compound != 'atoms':
            mdt.check.masses(ag=atm_grp)
    else:
        center = 'cog'
    
    return atm_grp.wrap(compound=compound,
                        center=center,
                        box=box,
                        inplace=inplace)




def make_whole(atm_grp, compound='fragments', reference='com',
        inplace=True, debug=False):
    """
    Make compounds of a MDAnalysis
    :class:`~MDAnalysis.core.groups.AtomGroup` that are split across the
    simulation box edges due to periodic boundary conditions whole again
    by using the :func:`~MDAnalysis.core.groups.AtomGroup.unwrap`
    method of the :class:`~MDAnalysis.core.groups.AtomGroup`. Another
    possible MDAnalysis function for making molecules whole again is
    :func:`~MDAnalysis.lib.mdamath.make_whole`.
    
    Note
    ----
    Before making any compound whole, all atoms of `atm_grp` are wrapped
    back into the primary unit cell, to make sure that the algorithm is
    working properly. This means that calling this function implicitly
    sets all atoms back into the primary unit cell.
    
    Note
    ----
    Changing atom positions is not reflected in any file; reading any
    frame from the :attr:`~MDAnalysis.core.universe.Universe.trajectory`
    will replace the change with that from the file except if the
    :attr:`~MDAnalysis.core.universe.Universe.trajectory` is held in
    memory, e.g., when the
    :method:`~MDAnalysis.core.universe.Universe.transfer_to_memory`
    method was used.
    
    Parameters
    ----------
    atm_grp : MDAnalysis.core.groups.AtomGroup instance
        The MDAnalysis :class:`~MDAnalysis.core.groups.AtomGroup` whose
        molecules shall be made whole. Note that in any case, even with
        e.g. ``compound='residues'``, only the postions of atoms
        belonging to `atm_grp` are taken into account. If you want
        entire molecules to be made whole, make sure that all atoms of
        these molecules are part of `atm_grp`.
    compound : str, optional
        Which type of component to make whole. Must be either
        ``'group'``, ``'segments'``, ``'residues'``, ``'molecules'`` or
        ``'fragments'``. Note that, in any case, all atoms within each
        compound must be interconnected by bonds, i.e. compounds must
        correspond to (parts of) molecules. In any case, this is
        fulfilled for 'fragments', because a MDAnalysis fragment is what
        is typically considered a molecule: an
        :class:`~MDAnalysis.core.groups.AtomGroup` where any atom is
        reachable from any other atom in the
        :class:`~MDAnalysis.core.groups.AtomGroup` by traversing bonds,
        and none of its atoms is bonded to any atoms outside the
        :class:`~MDAnalysis.core.groups.AtomGroup`. A 'molecule' in
        MDAnalysis refers to a GROMACS-specific concept.
    reference : str, optional
        If 'com' (center of mass) or 'cog' (center of geometry), the
        compounds that were made whole will be shifted so that their
        individual reference point lies within the primary unit cell. If
        None, no such shift is performed.
    inplace : bool, optional
        If ``True``, coordinates will be changed in place. Note that in
        any case all atoms are shifted back into the primary unit cell.
        But if `inplace` is ``True``, atoms of molecules that were made
        whole again may lie outside the box.
    debug : bool, optional
        If ``True``, check the input arguments. Default: ``False``
    
    Returns
    -------
    coords : numpy.ndarray
        Numpy array with atom coordinates of whole molecules of shape
        ``(atm_grp.n_atoms, 3)``.
    """
    
    if debug:
        if (compound != 'group' and
            compound != 'segments' and
            compound != 'residues' and
            compound != 'molecules' and
            compound != 'fragments'):
            raise ValueError("compound must be either 'group',"
                             " 'segments', 'residues', 'molecules' or"
                             " 'fragments', but you gave '{}'"
                             .format(compound))
        if (reference != 'com' and
            reference != 'cog' and
            reference is not None):
            raise ValueError("reference must be either 'com', 'cog' or"
                             " None, but you gave {}".format(reference))
        if reference == 'com':
            mdt.check.masses(ag=atm_grp, flash_test=False)
        if len(atm_grp.bonds) <= 0:
            raise ValueError("The AtomGroup contains no bonds")
    
    if reference == 'com':
        mdt.check.masses(ag=atm_grp)
    mdt.box.wrap(ag=atm_grp, inplace=True, debug=debug)
    
    return atm_grp.unwrap(compound=compound,
                          reference=reference,
                          inplace=inplace)




def dist_vecs(coords1, coords2, box=None, result=None, debug=False):
    """
    Calculate the distance vectors between two sets of coordinates. If
    your are only interested in the distances itself (i.e. the norm of
    the distance vectors), consider using
    :func:`MDAnalysis.lib.distances.calc_bonds` or
    :func:`MDAnalysis.analysis.distances.dist` instead.
    
    If the optional argument box is supplied, the minimum image
    convention is applied. Works currently only for orthorhombic boxes.
    
    Parameters
    ----------
    coords1 : array_like
        Coordinate array of shape ``(3,)`` or ``(n, 3)`` with ``n``
        being the number of particles.
    coords2 : array_like
        Coordinate array of the same shape as `coords1`.
    box : array_like, optional
        The unit cell dimensions of the system, which must be orthogonal
        and provided in the same format as returned by
        :attr:`MDAnalysis.coordinates.base.Timestep.dimensions`:
        ``[lx, ly, lz, alpha, beta, gamma]``.
    result : numpy.ndarray, optional
        Preallocated result array of the same shape as `coords1` and
        dtype ``numpy.float64``. Avoids creating the array which saves
        time when the function is called repeatedly.
    debug : bool, optional
        If ``True``, check the input arguments. Default: ``False``
    
    returns
    -------
    dist_vecs : numpy.ndarray
        Distance array of the same shape as `coords1`. The i-th element
        is ``coords1[i] - coords2[i]``.
    """
    
    if debug:
        mdt.check.pos_array(coords1)
        mdt.check.pos_array(coords2, shape=coords1.shape)
        if result is not None:
            mdt.check.pos_array(result,
                                  shape=coords1.shape,
                                  dtype=np.float64)
    
    dist_vecs = np.subtract(coords1,
                            coords2,
                            out=result,
                            dtype=np.float64)
    if box is not None:
        mdt.check.box(box, with_angles=True, orthorhombic=True, dim=1)
        box = np.asarray(box[:3])
        dist_vecs -= np.floor(dist_vecs/box + 0.5) * box
    
    return dist_vecs




def unwrap(atm_grp, coord_wrapped_prev, coord_unwrapped_prev,
        make_whole=False, keep_whole=False, compound='fragments',
        center='com', displacement=None, inplace=False, debug=False):
    """
    Unwrap the atoms of a MDAnalysis
    :class:`~MDAnalysis.core.groups.AtomGroup` out of the primary unit
    cell, i.e. calculate their coordinates in real space.
    
    This function uses the algorithm proposed by von Bülow et al. in
    J. Chem. Phys., 2020, 153, 021101. Basically it calculates the atom
    displacements of the wrapped atoms from frame to frame and adds
    these displacements to the previous unwrapped atom positions to
    build the unwraped trajectory.
    
    The main difference to :func:`unwrap_trj` is that :func:`unwrap_trj`
    unwraps the complete trajectory while this function only unwraps a
    single frame based on the unwrapped coordinates of the previous
    frame.
    
    Note
    ----
    If you want to change the
    :attr:`~MDAnalysis.core.groups.AtomGroup.positions` attribute of the
    :class:`~MDAnalysis.core.groups.AtomGroup` to the outcome of this
    function, keep in mind that changing atom positions is not reflected
    in any file; reading any frame from the
    :attr:`~MDAnalysis.core.universe.Universe.trajectory` will replace
    the change with that from the file except if the
    :attr:`~MDAnalysis.core.universe.Universe.trajectory` is held in
    memory, e.g., when the
    :method:`~MDAnalysis.core.universe.Universe.transfer_to_memory`
    method was used.
    
    Parameters
    ----------
    atm_grp : MDAnalysis.core.groups.AtomGroup
        The :class:`~MDAnalysis.core.groups.AtomGroup` whose atoms
        should be unwrapped into real space.
    coord_wrapped_prev : array_like
        Array of the same shape as ``atm_grp.positions.shape``
        containing the wrapped coordinates of `atm_grp` from the
        previous frame.
    coord_unwrapped_prev : array_like
        Array of the same shape as ``atm_grp.positions.shape``
        containing the unwrapped coordinates of `atm_grp` from the
        previous frame.
    make_whole : bool, optional
        If ``True``, make the compounds of `atm_grp` that are split
        across the simulation box edges whole again for each individual
        frame before unwrapping.
    keep_whole : bool, optional
        If the molecules in the `universe` are already whole for each
        frame, it is sufficient to propagate these whole molecules in
        real space instead of making all the molecules whole again. Note
        that `make_whole` takes precedence over `keep_whole`.
    compound : str, optional
        Which type of component to make/keep whole. Must be either
        ``'group'``, ``'segments'``, ``'residues'``, ``'molecules'`` or
        ``'fragments'``. See :func:`make_whole` for more details.
    center : str, optional
        How to define the centers of the compounds. Must be either
        ``'com'`` for center of mass or ``'cog'`` for center of geometry.
        The compounds are shifted in such a way that their centers lie
        within the primary unit cell. A change of `center` might affect
        the unwrapped trajectory slightly, because the unwrapping might
        start from a slightly different configuration.
    displacement : numpy.ndarray, optional
        Preallocated temporary array of the same shape as
        ``atm_grp.positions.shape`` and dtype ``numpy.float64``. If
        provided, this array is used to store the displacement vectors
        from the previous (`coord_wrapped_prev`) to the current
        (``mdt.box.wrap(atm_grp.positions)``) frame. Avoids creating the
        array which saves time when the function is called repeatedly
        and additionally the displacement vectors can be used outside
        this function for further analyses. But bear in mind that this
        array is overwritten each time this function is called.
    inplace : bool, optional
        If ``True``, change `coord_unwrapped_prev` inplace to the
        unwrapped coordinates of the current frame
    debug : bool, optional
        If ``True``, check the input arguments. Default: ``False``
    
    Returns
    -------
    coord_unwrapped : numpy.ndarray
        The unwrapped coordinates of `atm_grp` at the current frame,
        nominally ``coord_unwrapped_prev + displacement``.
    """
    
    if debug:
        mdt.check.pos_array(coord_wrapped_prev,
                              shape=atm_grp.positions.shape)
        mdt.check.pos_array(coord_unwrapped_prev,
                              shape=atm_grp.positions.shape)
        if displacement is not None:
            mdt.check.pos_array(displacement,
                                  shape=atm_grp.positions.shape,
                                  dtype=np.float64)
        if make_whole and len(atm_grp.bonds) <= 0:
            raise ValueError("The AtomGroup contains no bonds to make"
                             " whole")
        if (make_whole and
            compound != 'group' and
            compound != 'segments' and
            compound != 'residues' and
            compound != 'molecules' and
            compound != 'fragments'):
            raise ValueError("compound must be either 'group',"
                             " 'segments', 'residues', 'molecules' or"
                             " 'fragments', but you gave '{}'"
                             .format(compound))
        if center != 'com' and center != 'cog':
            raise ValueError("center must be either 'com' or 'cog',"
                             " but you gave {}".format(center))
        if center == 'com':
            mdt.check.masses(ag=atm_grp, flash_test=False)
    
    if make_whole:
        mdt.box.make_whole(ag=atm_grp,
                           compound=compound,
                           reference=center,
                           inplace=True,
                           debug=debug)
    elif keep_whole:
        mdt.box.wrap(ag=atm_grp,
                     compound=compound,
                     center=center,
                     inplace=True,
                     debug=debug)
    else:
        mdt.box.wrap(ag=atm_grp,
                     compound='atoms',
                     inplace=True,
                     debug=debug)
    displacement = mdt.box.dist_vecs(coords1=atm_grp.positions,
                                     coords2=coord_wrapped_prev,
                                     box=atm_grp.dimensions,
                                     result=displacement,
                                     debug=debug)
    if inplace:
        coord_unwrapped_prev += displacement
        return coord_unwrapped_prev
    else:
        return coord_unwrapped_prev + displacement




def unwrap_trj(topfile, trjfile, universe, atm_grp, end=-1,
        make_whole=False, keep_whole=False, compound='fragments',
        center='com', verbose=False, debug=False):
    """
    Unwrap the atoms of a MDAnalysis
    :class:`~MDAnalysis.core.groups.AtomGroup` out of the primary unit
    cell, i.e. calculate their coordinates in real space.
    
    This function uses the algorithm proposed by von Bülow et al. in
    J. Chem. Phys., 2020, 153, 021101. Basically it calculates the atom
    displacements of the wrapped atoms from frame to frame and adds
    these displacements to the previous unwrapped atom positions to
    build the unwraped trajectory.
    
    The main difference to :func:`unwrap` is that :func:`unwrap` only
    unwraps a single frame while this function unwraps the complete
    trajectory.
    
    Parameters
    ----------
    topfile, trjfile : str
        Because any changes to the
        :attr:`~MDAnalysis.core.groups.AtomGroup.positions` attribute of
        a :class:`~MDAnalysis.core.groups.AtomGroup` are overwritten
        each time the frame of the
        :attr:`~MDAnalysis.core.universe.Universe.trajectory` is changed
        (except if the
        :attr:`~MDAnalysis.core.universe.Universe.trajectory` is held in
        memory), the changes are written to a new trajectory. The name
        of the new (unwrapped) trajectory is given by `trjfile` and the
        name of the corresponding topology is given by `topfile`. Only
        the atoms of `atm_grp` are written to the new trajectory. When
        the unwrapping procedure is done, you can create a new universe
        from this unwrapped trajectory and topology. See the
        `MDAnalysis user guide`_ for supported file formats.
    universe : MDAnalysis.core.universe.Universe
        The universe holding the trajectory and
        :class:`~MDAnalysis.core.groups.AtomGroup` to unwrap. You cannot
        pass a :class:`MDAnalysis.coordinates.base.FrameIteratorSliced`
        here, since unwrapping always has to start with the first frame
        and is much safer if every single frame is considered, because
        the algorithm only works if particles do not move more than half
        the box length in one step. If you want to unwrap the trajectory
        only until a certain point, use the `end` argument.
    atm_grp : MDAnalysis.core.groups.AtomGroup
        The :class:`~MDAnalysis.core.groups.AtomGroup` whose atoms
        should be unwrapped into real space. The
        :class:`~MDAnalysis.core.groups.AtomGroup` must not be an
        :class:`~MDAnalysis.core.groups.UpdatingAtomGroup`.
    end : int, optional
        Last frame to unwrap (exclusive, i.e. the last frame to unwrap
        is actually ``end-1``). A negative value means unwrap the
        complete trajectory.
    make_whole : bool, optional
        If ``True``, make the compounds of `atm_grp` that are split
        across the simulation box edges whole again for each individual
        frame before unwrapping.
    keep_whole : bool, optional
        If the molecules in the `universe` are already whole for each
        frame, it is sufficient to start from a structure with (at least
        a part of) the whole molecules in the primary unit cell and then
        propagate these whole molecules in real space instead of making
        the molecules whole for each individual frame. Note that
        `make_whole` takes precedence over `keep_whole`.
    compound : str, optional
        Which type of component to make/keep whole. Must be either
        ``'group'``, ``'segments'``, ``'residues'``, ``'molecules'`` or
        ``'fragments'``. See :func:`make_whole` for more details.
    center : str, optional
        How to define the centers of the compounds. Must be either
        ``'com'`` for center of mass or ``'cog'`` for center of geometry.
        The compounds are shifted in such a way that their centers lie
        within the primary unit cell. A change of `center` might affect
        the unwrapped trajectory slightly, because the unwrapping might
        start from a slightly different configuration.
    verbose : bool, optional
        If ``True``, print progress information to standard output.
    debug : bool, optional
        If ``True``, check the input arguments.
    
    .. _MDAnalysis user guide: https://userguide.mdanalysis.org/1.0.0/formats/index.html
    """
    
    if debug:
        if isinstance(atm_grp, mda.core.groups.UpdatingAtomGroup):
            raise TypeError("atm_grp must not be an"
                            " MDAnalysis.core.groups.UpdatingAtomGroup")
        if make_whole and len(atm_grp.bonds) <= 0:
            raise ValueError("The AtomGroup contains no bonds to make"
                             " whole")
        if (make_whole and
            compound != 'group' and
            compound != 'segments' and
            compound != 'residues' and
            compound != 'molecules' and
            compound != 'fragments'):
            raise ValueError("compound must be either 'group',"
                             " 'segments', 'residues', 'molecules' or"
                             " 'fragments', but you gave '{}'"
                             .format(compound))
        if center != 'com' and center != 'cog':
            raise ValueError("center must be either 'com' or 'cog',"
                             " but you gave {}".format(center))
        if center == 'com':
            mdt.check.masses(ag=atm_grp, flash_test=False)
    
    if end < 0:
        end = universe.trajectory.n_frames
    _, end, _, _ = mdt.check.frame_slicing(
                       start=0,
                       stop=end,
                       step=1,
                       n_frames_tot=universe.trajectory.n_frames)
    displacement = np.full(atm_grp.positions.shape,
                           np.nan,
                           dtype=np.float64)
    
    ts = universe.trajectory[0]
    if verbose:
        timer = datetime.now()
        proc = psutil.Process(os.getpid())
        last_frame = universe.trajectory[end-1].frame
        ts = universe.trajectory[0]
        print("  Frame   {:12d}".format(ts.frame), flush=True)
        print("    Step: {:>12}    Time: {:>12} (ps)"
              .format(ts.data['step'], ts.data['time']),
              flush=True)
        print("    Elapsed time:             {}"
              .format(datetime.now()-timer),
              flush=True)
        print("    Current memory usage: {:18.2f} MiB"
              .format(proc.memory_info().rss/2**20),
              flush=True)
        timer = datetime.now()
    if debug:
        mdt.check.box(box=ts.dimensions, with_angles=True, dim=1)
    if make_whole or keep_whole:
        coord_wrapped_prev = mdt.box.make_whole(ag=atm_grp,
                                                compound=compound,
                                                reference=center,
                                                inplace=True,
                                                debug=debug)
    else:
        coord_wrapped_prev = mdt.box.wrap(ag=atm_grp,
                                          compound='atoms',
                                          inplace=True,
                                          debug=debug)
    coord_unwrapped = coord_wrapped_prev.copy()
    
    mdt.fh.backup(topfile)
    atm_grp.write(topfile)
    mdt.fh.backup(trjfile)
    with mda.Writer(trjfile, atm_grp.n_atoms) as w:
        w.write(atm_grp)
        for ts in universe.trajectory[1:end]:
            if (verbose and
                (ts.frame % 10**(len(str(ts.frame))-1) == 0 or
                 ts.frame == last_frame)):
                print("  Frame   {:12d}".format(ts.frame), flush=True)
                print("    Step: {:>12}    Time: {:>12} (ps)"
                      .format(ts.data['step'], ts.data['time']),
                      flush=True)
                print("    Elapsed time:             {}"
                      .format(datetime.now()-timer),
                      flush=True)
                print("    Current memory usage: {:18.2f} MiB"
                      .format(proc.memory_info().rss/2**20),
                      flush=True)
                timer = datetime.now()
            if debug:
                mdt.check.box(box=ts.dimensions, with_angles=True, dim=1)
            mdt.box.unwrap(atm_grp=atm_grp,
                           coord_wrapped_prev=coord_wrapped_prev,
                           coord_unwrapped_prev=coord_unwrapped,
                           make_whole=make_whole,
                           keep_whole=keep_whole,
                           compound=compound,
                           center=center,
                           displacement=displacement,
                           inplace=True,
                           debug=debug)
            atm_grp.positions = coord_unwrapped
            w.write(atm_grp)
    
    if verbose:
        print(flush=True)
        print("  Created {}".format(topfile), flush=True)
        print("  Created {}".format(trjfile), flush=True)
